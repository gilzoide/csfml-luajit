--[[
-- This file was automatically generated by Inclua 0.2.0 (https://github.com/gilzoide/inclua)
-- 
-- The Inclua team hopes this file was accurately generated, that it will be useful
-- and will never give SEGFAULTs, throw exceptions, or panic in a similar way.
-- This software is provided 'as-is', without any warranty.
-- Feel free to change and redistribute it.
--]]
local ffi = require 'ffi'

ffi.cdef[=[
typedef enum  {
  sfBlendFactorZero = 0,
  sfBlendFactorOne = 1,
  sfBlendFactorSrcColor = 2,
  sfBlendFactorOneMinusSrcColor = 3,
  sfBlendFactorDstColor = 4,
  sfBlendFactorOneMinusDstColor = 5,
  sfBlendFactorSrcAlpha = 6,
  sfBlendFactorOneMinusSrcAlpha = 7,
  sfBlendFactorDstAlpha = 8,
  sfBlendFactorOneMinusDstAlpha = 9,
} sfBlendFactor;

typedef enum  {
  sfBlendEquationAdd = 0,
  sfBlendEquationSubtract = 1,
  sfBlendEquationReverseSubtract = 2,
} sfBlendEquation;

typedef struct  {
  sfBlendFactor colorSrcFactor;
  sfBlendFactor colorDstFactor;
  sfBlendEquation colorEquation;
  sfBlendFactor alphaSrcFactor;
  sfBlendFactor alphaDstFactor;
  sfBlendEquation alphaEquation;
} sfBlendMode;

const sfBlendMode sfBlendAlpha;
const sfBlendMode sfBlendAdd;
const sfBlendMode sfBlendMultiply;
const sfBlendMode sfBlendNone;
typedef struct  {
  sfUint8 r;
  sfUint8 g;
  sfUint8 b;
  sfUint8 a;
} sfColor;

sfColor sfBlack;
sfColor sfWhite;
sfColor sfRed;
sfColor sfGreen;
sfColor sfBlue;
sfColor sfYellow;
sfColor sfMagenta;
sfColor sfCyan;
sfColor sfTransparent;
sfColor sfColor_fromRGB(sfUint8 red, sfUint8 green, sfUint8 blue);
sfColor sfColor_fromRGBA(sfUint8 red, sfUint8 green, sfUint8 blue, sfUint8 alpha);
sfColor sfColor_fromInteger(sfUint32 color);
sfUint32 sfColor_toInteger(sfColor color);
sfColor sfColor_add(sfColor color1, sfColor color2);
sfColor sfColor_subtract(sfColor color1, sfColor color2);
sfColor sfColor_modulate(sfColor color1, sfColor color2);
typedef struct  {
  float left;
  float top;
  float width;
  float height;
} sfFloatRect;

typedef struct  {
  int left;
  int top;
  int width;
  int height;
} sfIntRect;

bool sfFloatRect_contains(const sfFloatRect * rect, float x, float y);
bool sfIntRect_contains(const sfIntRect * rect, int x, int y);
bool sfFloatRect_intersects(const sfFloatRect * rect1, const sfFloatRect * rect2, sfFloatRect * intersection);
bool sfIntRect_intersects(const sfIntRect * rect1, const sfIntRect * rect2, sfIntRect * intersection);
typedef struct sfCircleShape sfCircleShape;

typedef struct sfConvexShape sfConvexShape;

typedef struct sfFont sfFont;

typedef struct sfImage sfImage;

typedef struct sfShader sfShader;

typedef struct sfRectangleShape sfRectangleShape;

typedef struct sfRenderTexture sfRenderTexture;

typedef struct sfRenderWindow sfRenderWindow;

typedef struct sfShape sfShape;

typedef struct sfSprite sfSprite;

typedef struct sfText sfText;

typedef struct sfTexture sfTexture;

typedef struct sfTransformable sfTransformable;

typedef struct sfVertexArray sfVertexArray;

typedef struct sfVertexBuffer sfVertexBuffer;

typedef struct sfView sfView;

typedef struct  {
  float matrix[9];
} sfTransform;

const sfTransform sfTransform_Identity;
sfTransform sfTransform_fromMatrix(float a00, float a01, float a02, float a10, float a11, float a12, float a20, float a21, float a22);
void sfTransform_getMatrix(const sfTransform * transform, float * matrix);
sfTransform sfTransform_getInverse(const sfTransform * transform);
sfVector2f sfTransform_transformPoint(const sfTransform * transform, sfVector2f point);
sfFloatRect sfTransform_transformRect(const sfTransform * transform, sfFloatRect rectangle);
void sfTransform_combine(sfTransform * transform, const sfTransform * other);
void sfTransform_translate(sfTransform * transform, float x, float y);
void sfTransform_rotate(sfTransform * transform, float angle);
void sfTransform_rotateWithCenter(sfTransform * transform, float angle, float centerX, float centerY);
void sfTransform_scale(sfTransform * transform, float scaleX, float scaleY);
void sfTransform_scaleWithCenter(sfTransform * transform, float scaleX, float scaleY, float centerX, float centerY);
bool sfTransform_equal(sfTransform * left, sfTransform * right);
sfCircleShape * sfCircleShape_create();
sfCircleShape * sfCircleShape_copy(const sfCircleShape * shape);
void sfCircleShape_destroy(sfCircleShape * shape);
void sfCircleShape_setPosition(sfCircleShape * shape, sfVector2f position);
void sfCircleShape_setRotation(sfCircleShape * shape, float angle);
void sfCircleShape_setScale(sfCircleShape * shape, sfVector2f scale);
void sfCircleShape_setOrigin(sfCircleShape * shape, sfVector2f origin);
sfVector2f sfCircleShape_getPosition(const sfCircleShape * shape);
float sfCircleShape_getRotation(const sfCircleShape * shape);
sfVector2f sfCircleShape_getScale(const sfCircleShape * shape);
sfVector2f sfCircleShape_getOrigin(const sfCircleShape * shape);
void sfCircleShape_move(sfCircleShape * shape, sfVector2f offset);
void sfCircleShape_rotate(sfCircleShape * shape, float angle);
void sfCircleShape_scale(sfCircleShape * shape, sfVector2f factors);
sfTransform sfCircleShape_getTransform(const sfCircleShape * shape);
sfTransform sfCircleShape_getInverseTransform(const sfCircleShape * shape);
void sfCircleShape_setTexture(sfCircleShape * shape, const sfTexture * texture, sfBool resetRect);
void sfCircleShape_setTextureRect(sfCircleShape * shape, sfIntRect rect);
void sfCircleShape_setFillColor(sfCircleShape * shape, sfColor color);
void sfCircleShape_setOutlineColor(sfCircleShape * shape, sfColor color);
void sfCircleShape_setOutlineThickness(sfCircleShape * shape, float thickness);
const sfTexture * sfCircleShape_getTexture(const sfCircleShape * shape);
sfIntRect sfCircleShape_getTextureRect(const sfCircleShape * shape);
sfColor sfCircleShape_getFillColor(const sfCircleShape * shape);
sfColor sfCircleShape_getOutlineColor(const sfCircleShape * shape);
float sfCircleShape_getOutlineThickness(const sfCircleShape * shape);
size_t sfCircleShape_getPointCount(const sfCircleShape * shape);
sfVector2f sfCircleShape_getPoint(const sfCircleShape * shape, size_t index);
void sfCircleShape_setRadius(sfCircleShape * shape, float radius);
float sfCircleShape_getRadius(const sfCircleShape * shape);
void sfCircleShape_setPointCount(sfCircleShape * shape, size_t count);
sfFloatRect sfCircleShape_getLocalBounds(const sfCircleShape * shape);
sfFloatRect sfCircleShape_getGlobalBounds(const sfCircleShape * shape);
sfConvexShape * sfConvexShape_create();
sfConvexShape * sfConvexShape_copy(const sfConvexShape * shape);
void sfConvexShape_destroy(sfConvexShape * shape);
void sfConvexShape_setPosition(sfConvexShape * shape, sfVector2f position);
void sfConvexShape_setRotation(sfConvexShape * shape, float angle);
void sfConvexShape_setScale(sfConvexShape * shape, sfVector2f scale);
void sfConvexShape_setOrigin(sfConvexShape * shape, sfVector2f origin);
sfVector2f sfConvexShape_getPosition(const sfConvexShape * shape);
float sfConvexShape_getRotation(const sfConvexShape * shape);
sfVector2f sfConvexShape_getScale(const sfConvexShape * shape);
sfVector2f sfConvexShape_getOrigin(const sfConvexShape * shape);
void sfConvexShape_move(sfConvexShape * shape, sfVector2f offset);
void sfConvexShape_rotate(sfConvexShape * shape, float angle);
void sfConvexShape_scale(sfConvexShape * shape, sfVector2f factors);
sfTransform sfConvexShape_getTransform(const sfConvexShape * shape);
sfTransform sfConvexShape_getInverseTransform(const sfConvexShape * shape);
void sfConvexShape_setTexture(sfConvexShape * shape, const sfTexture * texture, sfBool resetRect);
void sfConvexShape_setTextureRect(sfConvexShape * shape, sfIntRect rect);
void sfConvexShape_setFillColor(sfConvexShape * shape, sfColor color);
void sfConvexShape_setOutlineColor(sfConvexShape * shape, sfColor color);
void sfConvexShape_setOutlineThickness(sfConvexShape * shape, float thickness);
const sfTexture * sfConvexShape_getTexture(const sfConvexShape * shape);
sfIntRect sfConvexShape_getTextureRect(const sfConvexShape * shape);
sfColor sfConvexShape_getFillColor(const sfConvexShape * shape);
sfColor sfConvexShape_getOutlineColor(const sfConvexShape * shape);
float sfConvexShape_getOutlineThickness(const sfConvexShape * shape);
size_t sfConvexShape_getPointCount(const sfConvexShape * shape);
sfVector2f sfConvexShape_getPoint(const sfConvexShape * shape, size_t index);
void sfConvexShape_setPointCount(sfConvexShape * shape, size_t count);
void sfConvexShape_setPoint(sfConvexShape * shape, size_t index, sfVector2f point);
sfFloatRect sfConvexShape_getLocalBounds(const sfConvexShape * shape);
sfFloatRect sfConvexShape_getGlobalBounds(const sfConvexShape * shape);
typedef struct  {
  const char * family;
} sfFontInfo;

typedef struct  {
  float advance;
  sfFloatRect bounds;
  sfIntRect textureRect;
} sfGlyph;

sfFont * sfFont_createFromFile(const char * filename);
sfFont * sfFont_createFromMemory(const void * data, size_t sizeInBytes);
sfFont * sfFont_createFromStream(sfInputStream * stream);
sfFont * sfFont_copy(const sfFont * font);
void sfFont_destroy(sfFont * font);
sfGlyph sfFont_getGlyph(const sfFont * font, sfUint32 codePoint, unsigned int characterSize, sfBool bold, float outlineThickness);
float sfFont_getKerning(const sfFont * font, sfUint32 first, sfUint32 second, unsigned int characterSize);
float sfFont_getLineSpacing(const sfFont * font, unsigned int characterSize);
float sfFont_getUnderlinePosition(const sfFont * font, unsigned int characterSize);
float sfFont_getUnderlineThickness(const sfFont * font, unsigned int characterSize);
const sfTexture * sfFont_getTexture(sfFont * font, unsigned int characterSize);
sfFontInfo sfFont_getInfo(const sfFont * font);
sfImage * sfImage_create(unsigned int width, unsigned int height);
sfImage * sfImage_createFromColor(unsigned int width, unsigned int height, sfColor color);
sfImage * sfImage_createFromPixels(unsigned int width, unsigned int height, const sfUint8 * pixels);
sfImage * sfImage_createFromFile(const char * filename);
sfImage * sfImage_createFromMemory(const void * data, size_t size);
sfImage * sfImage_createFromStream(sfInputStream * stream);
sfImage * sfImage_copy(const sfImage * image);
void sfImage_destroy(sfImage * image);
bool sfImage_saveToFile(const sfImage * image, const char * filename);
sfVector2u sfImage_getSize(const sfImage * image);
void sfImage_createMaskFromColor(sfImage * image, sfColor color, sfUint8 alpha);
void sfImage_copyImage(sfImage * image, const sfImage * source, unsigned int destX, unsigned int destY, sfIntRect sourceRect, sfBool applyAlpha);
void sfImage_setPixel(sfImage * image, unsigned int x, unsigned int y, sfColor color);
sfColor sfImage_getPixel(const sfImage * image, unsigned int x, unsigned int y);
const sfUint8 * sfImage_getPixelsPtr(const sfImage * image);
void sfImage_flipHorizontally(sfImage * image);
void sfImage_flipVertically(sfImage * image);
typedef enum  {
  sfPoints = 0,
  sfLines = 1,
  sfLineStrip = 2,
  sfTriangles = 3,
  sfTriangleStrip = 4,
  sfTriangleFan = 5,
  sfQuads = 6,
  sfLinesStrip = 2,
  sfTrianglesStrip = 4,
  sfTrianglesFan = 5,
} sfPrimitiveType;

sfRectangleShape * sfRectangleShape_create();
sfRectangleShape * sfRectangleShape_copy(const sfRectangleShape * shape);
void sfRectangleShape_destroy(sfRectangleShape * shape);
void sfRectangleShape_setPosition(sfRectangleShape * shape, sfVector2f position);
void sfRectangleShape_setRotation(sfRectangleShape * shape, float angle);
void sfRectangleShape_setScale(sfRectangleShape * shape, sfVector2f scale);
void sfRectangleShape_setOrigin(sfRectangleShape * shape, sfVector2f origin);
sfVector2f sfRectangleShape_getPosition(const sfRectangleShape * shape);
float sfRectangleShape_getRotation(const sfRectangleShape * shape);
sfVector2f sfRectangleShape_getScale(const sfRectangleShape * shape);
sfVector2f sfRectangleShape_getOrigin(const sfRectangleShape * shape);
void sfRectangleShape_move(sfRectangleShape * shape, sfVector2f offset);
void sfRectangleShape_rotate(sfRectangleShape * shape, float angle);
void sfRectangleShape_scale(sfRectangleShape * shape, sfVector2f factors);
sfTransform sfRectangleShape_getTransform(const sfRectangleShape * shape);
sfTransform sfRectangleShape_getInverseTransform(const sfRectangleShape * shape);
void sfRectangleShape_setTexture(sfRectangleShape * shape, const sfTexture * texture, sfBool resetRect);
void sfRectangleShape_setTextureRect(sfRectangleShape * shape, sfIntRect rect);
void sfRectangleShape_setFillColor(sfRectangleShape * shape, sfColor color);
void sfRectangleShape_setOutlineColor(sfRectangleShape * shape, sfColor color);
void sfRectangleShape_setOutlineThickness(sfRectangleShape * shape, float thickness);
const sfTexture * sfRectangleShape_getTexture(const sfRectangleShape * shape);
sfIntRect sfRectangleShape_getTextureRect(const sfRectangleShape * shape);
sfColor sfRectangleShape_getFillColor(const sfRectangleShape * shape);
sfColor sfRectangleShape_getOutlineColor(const sfRectangleShape * shape);
float sfRectangleShape_getOutlineThickness(const sfRectangleShape * shape);
size_t sfRectangleShape_getPointCount(const sfRectangleShape * shape);
sfVector2f sfRectangleShape_getPoint(const sfRectangleShape * shape, size_t index);
void sfRectangleShape_setSize(sfRectangleShape * shape, sfVector2f size);
sfVector2f sfRectangleShape_getSize(const sfRectangleShape * shape);
sfFloatRect sfRectangleShape_getLocalBounds(const sfRectangleShape * shape);
sfFloatRect sfRectangleShape_getGlobalBounds(const sfRectangleShape * shape);
typedef struct  {
  sfBlendMode blendMode;
  sfTransform transform;
  const sfTexture * texture;
  const sfShader * shader;
} sfRenderStates;

typedef struct  {
  sfVector2f position;
  sfColor color;
  sfVector2f texCoords;
} sfVertex;

sfRenderTexture * sfRenderTexture_create(unsigned int width, unsigned int height, sfBool depthBuffer);
sfRenderTexture * sfRenderTexture_createWithSettings(unsigned int width, unsigned int height, const sfContextSettings * settings);
void sfRenderTexture_destroy(sfRenderTexture * renderTexture);
sfVector2u sfRenderTexture_getSize(const sfRenderTexture * renderTexture);
bool sfRenderTexture_setActive(sfRenderTexture * renderTexture, sfBool active);
void sfRenderTexture_display(sfRenderTexture * renderTexture);
void sfRenderTexture_clear(sfRenderTexture * renderTexture, sfColor color);
void sfRenderTexture_setView(sfRenderTexture * renderTexture, const sfView * view);
const sfView * sfRenderTexture_getView(const sfRenderTexture * renderTexture);
const sfView * sfRenderTexture_getDefaultView(const sfRenderTexture * renderTexture);
sfIntRect sfRenderTexture_getViewport(const sfRenderTexture * renderTexture, const sfView * view);
sfVector2f sfRenderTexture_mapPixelToCoords(const sfRenderTexture * renderTexture, sfVector2i point, const sfView * view);
sfVector2i sfRenderTexture_mapCoordsToPixel(const sfRenderTexture * renderTexture, sfVector2f point, const sfView * view);
void sfRenderTexture_drawSprite(sfRenderTexture * renderTexture, const sfSprite * object, const sfRenderStates * states);
void sfRenderTexture_drawText(sfRenderTexture * renderTexture, const sfText * object, const sfRenderStates * states);
void sfRenderTexture_drawShape(sfRenderTexture * renderTexture, const sfShape * object, const sfRenderStates * states);
void sfRenderTexture_drawCircleShape(sfRenderTexture * renderTexture, const sfCircleShape * object, const sfRenderStates * states);
void sfRenderTexture_drawConvexShape(sfRenderTexture * renderTexture, const sfConvexShape * object, const sfRenderStates * states);
void sfRenderTexture_drawRectangleShape(sfRenderTexture * renderTexture, const sfRectangleShape * object, const sfRenderStates * states);
void sfRenderTexture_drawVertexArray(sfRenderTexture * renderTexture, const sfVertexArray * object, const sfRenderStates * states);
void sfRenderTexture_drawVertexBuffer(sfRenderTexture * renderTexture, const sfVertexBuffer * object, const sfRenderStates * states);
void sfRenderTexture_drawPrimitives(sfRenderTexture * renderTexture, const sfVertex * vertices, size_t vertexCount, sfPrimitiveType type, const sfRenderStates * states);
void sfRenderTexture_pushGLStates(sfRenderTexture * renderTexture);
void sfRenderTexture_popGLStates(sfRenderTexture * renderTexture);
void sfRenderTexture_resetGLStates(sfRenderTexture * renderTexture);
const sfTexture * sfRenderTexture_getTexture(const sfRenderTexture * renderTexture);
unsigned int sfRenderTexture_getMaximumAntialiasingLevel();
void sfRenderTexture_setSmooth(sfRenderTexture * renderTexture, sfBool smooth);
bool sfRenderTexture_isSmooth(const sfRenderTexture * renderTexture);
void sfRenderTexture_setRepeated(sfRenderTexture * renderTexture, sfBool repeated);
bool sfRenderTexture_isRepeated(const sfRenderTexture * renderTexture);
bool sfRenderTexture_generateMipmap(sfRenderTexture * renderTexture);
sfRenderWindow * sfRenderWindow_create(sfVideoMode mode, const char * title, sfUint32 style, const sfContextSettings * settings);
sfRenderWindow * sfRenderWindow_createUnicode(sfVideoMode mode, const sfUint32 * title, sfUint32 style, const sfContextSettings * settings);
sfRenderWindow * sfRenderWindow_createFromHandle(sfWindowHandle handle, const sfContextSettings * settings);
void sfRenderWindow_destroy(sfRenderWindow * renderWindow);
void sfRenderWindow_close(sfRenderWindow * renderWindow);
bool sfRenderWindow_isOpen(const sfRenderWindow * renderWindow);
sfContextSettings sfRenderWindow_getSettings(const sfRenderWindow * renderWindow);
bool sfRenderWindow_pollEvent(sfRenderWindow * renderWindow, sfEvent * event);
bool sfRenderWindow_waitEvent(sfRenderWindow * renderWindow, sfEvent * event);
sfVector2i sfRenderWindow_getPosition(const sfRenderWindow * renderWindow);
void sfRenderWindow_setPosition(sfRenderWindow * renderWindow, sfVector2i position);
sfVector2u sfRenderWindow_getSize(const sfRenderWindow * renderWindow);
void sfRenderWindow_setSize(sfRenderWindow * renderWindow, sfVector2u size);
void sfRenderWindow_setTitle(sfRenderWindow * renderWindow, const char * title);
void sfRenderWindow_setUnicodeTitle(sfRenderWindow * renderWindow, const sfUint32 * title);
void sfRenderWindow_setIcon(sfRenderWindow * renderWindow, unsigned int width, unsigned int height, const sfUint8 * pixels);
void sfRenderWindow_setVisible(sfRenderWindow * renderWindow, sfBool visible);
void sfRenderWindow_setVerticalSyncEnabled(sfRenderWindow * renderWindow, sfBool enabled);
void sfRenderWindow_setMouseCursorVisible(sfRenderWindow * renderWindow, sfBool show);
void sfRenderWindow_setMouseCursorGrabbed(sfRenderWindow * renderWindow, sfBool grabbed);
void sfRenderWindow_setMouseCursor(sfRenderWindow * window, const sfCursor * cursor);
void sfRenderWindow_setKeyRepeatEnabled(sfRenderWindow * renderWindow, sfBool enabled);
void sfRenderWindow_setFramerateLimit(sfRenderWindow * renderWindow, unsigned int limit);
void sfRenderWindow_setJoystickThreshold(sfRenderWindow * renderWindow, float threshold);
bool sfRenderWindow_setActive(sfRenderWindow * renderWindow, sfBool active);
void sfRenderWindow_requestFocus(sfRenderWindow * renderWindow);
bool sfRenderWindow_hasFocus(const sfRenderWindow * renderWindow);
void sfRenderWindow_display(sfRenderWindow * renderWindow);
sfWindowHandle sfRenderWindow_getSystemHandle(const sfRenderWindow * renderWindow);
void sfRenderWindow_clear(sfRenderWindow * renderWindow, sfColor color);
void sfRenderWindow_setView(sfRenderWindow * renderWindow, const sfView * view);
const sfView * sfRenderWindow_getView(const sfRenderWindow * renderWindow);
const sfView * sfRenderWindow_getDefaultView(const sfRenderWindow * renderWindow);
sfIntRect sfRenderWindow_getViewport(const sfRenderWindow * renderWindow, const sfView * view);
sfVector2f sfRenderWindow_mapPixelToCoords(const sfRenderWindow * renderWindow, sfVector2i point, const sfView * view);
sfVector2i sfRenderWindow_mapCoordsToPixel(const sfRenderWindow * renderWindow, sfVector2f point, const sfView * view);
void sfRenderWindow_drawSprite(sfRenderWindow * renderWindow, const sfSprite * object, const sfRenderStates * states);
void sfRenderWindow_drawText(sfRenderWindow * renderWindow, const sfText * object, const sfRenderStates * states);
void sfRenderWindow_drawShape(sfRenderWindow * renderWindow, const sfShape * object, const sfRenderStates * states);
void sfRenderWindow_drawCircleShape(sfRenderWindow * renderWindow, const sfCircleShape * object, const sfRenderStates * states);
void sfRenderWindow_drawConvexShape(sfRenderWindow * renderWindow, const sfConvexShape * object, const sfRenderStates * states);
void sfRenderWindow_drawRectangleShape(sfRenderWindow * renderWindow, const sfRectangleShape * object, const sfRenderStates * states);
void sfRenderWindow_drawVertexArray(sfRenderWindow * renderWindow, const sfVertexArray * object, const sfRenderStates * states);
void sfRenderWindow_drawVertexBuffer(sfRenderWindow * renderWindow, const sfVertexBuffer * object, const sfRenderStates * states);
void sfRenderWindow_drawPrimitives(sfRenderWindow * renderWindow, const sfVertex * vertices, size_t vertexCount, sfPrimitiveType type, const sfRenderStates * states);
void sfRenderWindow_pushGLStates(sfRenderWindow * renderWindow);
void sfRenderWindow_popGLStates(sfRenderWindow * renderWindow);
void sfRenderWindow_resetGLStates(sfRenderWindow * renderWindow);
sfImage * sfRenderWindow_capture(const sfRenderWindow * renderWindow);
sfVector2i sfMouse_getPositionRenderWindow(const sfRenderWindow * relativeTo);
void sfMouse_setPositionRenderWindow(sfVector2i position, const sfRenderWindow * relativeTo);
sfVector2i sfTouch_getPositionRenderWindow(unsigned int finger, const sfRenderWindow * relativeTo);
typedef sfVector2f sfGlslVec2;
typedef sfVector2i sfGlslIvec2;
typedef struct  {
  sfBool x;
  sfBool y;
} sfGlslBvec2;

typedef sfVector3f sfGlslVec3;
typedef struct  {
  int x;
  int y;
  int z;
} sfGlslIvec3;

typedef struct  {
  sfBool x;
  sfBool y;
  sfBool z;
} sfGlslBvec3;

typedef struct  {
  float x;
  float y;
  float z;
  float w;
} sfGlslVec4;

typedef struct  {
  int x;
  int y;
  int z;
  int w;
} sfGlslIvec4;

typedef struct  {
  sfBool x;
  sfBool y;
  sfBool z;
  sfBool w;
} sfGlslBvec4;

typedef struct  {
  float array[9];
} sfGlslMat3;

typedef struct  {
  float array[16];
} sfGlslMat4;

sfShader * sfShader_createFromFile(const char * vertexShaderFilename, const char * geometryShaderFilename, const char * fragmentShaderFilename);
sfShader * sfShader_createFromMemory(const char * vertexShader, const char * geometryShader, const char * fragmentShader);
sfShader * sfShader_createFromStream(sfInputStream * vertexShaderStream, sfInputStream * geometryShaderStream, sfInputStream * fragmentShaderStream);
void sfShader_destroy(sfShader * shader);
void sfShader_setFloatUniform(sfShader * shader, const char * name, float x);
void sfShader_setVec2Uniform(sfShader * shader, const char * name, sfGlslVec2 vector);
void sfShader_setVec3Uniform(sfShader * shader, const char * name, sfGlslVec3 vector);
void sfShader_setVec4Uniform(sfShader * shader, const char * name, sfGlslVec4 vector);
void sfShader_setColorUniform(sfShader * shader, const char * name, sfColor color);
void sfShader_setIntUniform(sfShader * shader, const char * name, int x);
void sfShader_setIvec2Uniform(sfShader * shader, const char * name, sfGlslIvec2 vector);
void sfShader_setIvec3Uniform(sfShader * shader, const char * name, sfGlslIvec3 vector);
void sfShader_setIvec4Uniform(sfShader * shader, const char * name, sfGlslIvec4 vector);
void sfShader_setIntColorUniform(sfShader * shader, const char * name, sfColor color);
void sfShader_setBoolUniform(sfShader * shader, const char * name, sfBool x);
void sfShader_setBvec2Uniform(sfShader * shader, const char * name, sfGlslBvec2 vector);
void sfShader_setBvec3Uniform(sfShader * shader, const char * name, sfGlslBvec3 vector);
void sfShader_setBvec4Uniform(sfShader * shader, const char * name, sfGlslBvec4 vector);
void sfShader_setMat3Uniform(sfShader * shader, const char * name, const sfGlslMat3 * matrix);
void sfShader_setMat4Uniform(sfShader * shader, const char * name, const sfGlslMat4 * matrix);
void sfShader_setTextureUniform(sfShader * shader, const char * name, const sfTexture * texture);
void sfShader_setCurrentTextureUniform(sfShader * shader, const char * name);
void sfShader_setFloatUniformArray(sfShader * shader, const char * name, const float * scalarArray, size_t length);
void sfShader_setVec2UniformArray(sfShader * shader, const char * name, const sfGlslVec2 * vectorArray, size_t length);
void sfShader_setVec3UniformArray(sfShader * shader, const char * name, const sfGlslVec3 * vectorArray, size_t length);
void sfShader_setVec4UniformArray(sfShader * shader, const char * name, const sfGlslVec4 * vectorArray, size_t length);
void sfShader_setMat3UniformArray(sfShader * shader, const char * name, const sfGlslMat3 * matrixArray, size_t length);
void sfShader_setMat4UniformArray(sfShader * shader, const char * name, const sfGlslMat4 * matrixArray, size_t length);
void sfShader_setFloatParameter(sfShader * shader, const char * name, float x);
void sfShader_setFloat2Parameter(sfShader * shader, const char * name, float x, float y);
void sfShader_setFloat3Parameter(sfShader * shader, const char * name, float x, float y, float z);
void sfShader_setFloat4Parameter(sfShader * shader, const char * name, float x, float y, float z, float w);
void sfShader_setVector2Parameter(sfShader * shader, const char * name, sfVector2f vector);
void sfShader_setVector3Parameter(sfShader * shader, const char * name, sfVector3f vector);
void sfShader_setColorParameter(sfShader * shader, const char * name, sfColor color);
void sfShader_setTransformParameter(sfShader * shader, const char * name, sfTransform transform);
void sfShader_setTextureParameter(sfShader * shader, const char * name, const sfTexture * texture);
void sfShader_setCurrentTextureParameter(sfShader * shader, const char * name);
unsigned int sfShader_getNativeHandle(const sfShader * shader);
void sfShader_bind(const sfShader * shader);
bool sfShader_isAvailable();
bool sfShader_isGeometryAvailable();
typedef size_t (*sfShapeGetPointCountCallback)(void*);
typedef sfVector2f (*sfShapeGetPointCallback)(size_t, void*);
sfShape * sfShape_create(sfShapeGetPointCountCallback getPointCount, sfShapeGetPointCallback getPoint, void * userData);
void sfShape_destroy(sfShape * shape);
void sfShape_setPosition(sfShape * shape, sfVector2f position);
void sfShape_setRotation(sfShape * shape, float angle);
void sfShape_setScale(sfShape * shape, sfVector2f scale);
void sfShape_setOrigin(sfShape * shape, sfVector2f origin);
sfVector2f sfShape_getPosition(const sfShape * shape);
float sfShape_getRotation(const sfShape * shape);
sfVector2f sfShape_getScale(const sfShape * shape);
sfVector2f sfShape_getOrigin(const sfShape * shape);
void sfShape_move(sfShape * shape, sfVector2f offset);
void sfShape_rotate(sfShape * shape, float angle);
void sfShape_scale(sfShape * shape, sfVector2f factors);
sfTransform sfShape_getTransform(const sfShape * shape);
sfTransform sfShape_getInverseTransform(const sfShape * shape);
void sfShape_setTexture(sfShape * shape, const sfTexture * texture, sfBool resetRect);
void sfShape_setTextureRect(sfShape * shape, sfIntRect rect);
void sfShape_setFillColor(sfShape * shape, sfColor color);
void sfShape_setOutlineColor(sfShape * shape, sfColor color);
void sfShape_setOutlineThickness(sfShape * shape, float thickness);
const sfTexture * sfShape_getTexture(const sfShape * shape);
sfIntRect sfShape_getTextureRect(const sfShape * shape);
sfColor sfShape_getFillColor(const sfShape * shape);
sfColor sfShape_getOutlineColor(const sfShape * shape);
float sfShape_getOutlineThickness(const sfShape * shape);
size_t sfShape_getPointCount(const sfShape * shape);
sfVector2f sfShape_getPoint(const sfShape * shape, size_t index);
sfFloatRect sfShape_getLocalBounds(const sfShape * shape);
sfFloatRect sfShape_getGlobalBounds(const sfShape * shape);
void sfShape_update(sfShape * shape);
sfSprite * sfSprite_create();
sfSprite * sfSprite_copy(const sfSprite * sprite);
void sfSprite_destroy(sfSprite * sprite);
void sfSprite_setPosition(sfSprite * sprite, sfVector2f position);
void sfSprite_setRotation(sfSprite * sprite, float angle);
void sfSprite_setScale(sfSprite * sprite, sfVector2f scale);
void sfSprite_setOrigin(sfSprite * sprite, sfVector2f origin);
sfVector2f sfSprite_getPosition(const sfSprite * sprite);
float sfSprite_getRotation(const sfSprite * sprite);
sfVector2f sfSprite_getScale(const sfSprite * sprite);
sfVector2f sfSprite_getOrigin(const sfSprite * sprite);
void sfSprite_move(sfSprite * sprite, sfVector2f offset);
void sfSprite_rotate(sfSprite * sprite, float angle);
void sfSprite_scale(sfSprite * sprite, sfVector2f factors);
sfTransform sfSprite_getTransform(const sfSprite * sprite);
sfTransform sfSprite_getInverseTransform(const sfSprite * sprite);
void sfSprite_setTexture(sfSprite * sprite, const sfTexture * texture, sfBool resetRect);
void sfSprite_setTextureRect(sfSprite * sprite, sfIntRect rectangle);
void sfSprite_setColor(sfSprite * sprite, sfColor color);
const sfTexture * sfSprite_getTexture(const sfSprite * sprite);
sfIntRect sfSprite_getTextureRect(const sfSprite * sprite);
sfColor sfSprite_getColor(const sfSprite * sprite);
sfFloatRect sfSprite_getLocalBounds(const sfSprite * sprite);
sfFloatRect sfSprite_getGlobalBounds(const sfSprite * sprite);
typedef enum  {
  sfTextRegular = 0,
  sfTextBold = 1,
  sfTextItalic = 2,
  sfTextUnderlined = 4,
  sfTextStrikeThrough = 8,
} sfTextStyle;

sfText * sfText_create();
sfText * sfText_copy(const sfText * text);
void sfText_destroy(sfText * text);
void sfText_setPosition(sfText * text, sfVector2f position);
void sfText_setRotation(sfText * text, float angle);
void sfText_setScale(sfText * text, sfVector2f scale);
void sfText_setOrigin(sfText * text, sfVector2f origin);
sfVector2f sfText_getPosition(const sfText * text);
float sfText_getRotation(const sfText * text);
sfVector2f sfText_getScale(const sfText * text);
sfVector2f sfText_getOrigin(const sfText * text);
void sfText_move(sfText * text, sfVector2f offset);
void sfText_rotate(sfText * text, float angle);
void sfText_scale(sfText * text, sfVector2f factors);
sfTransform sfText_getTransform(const sfText * text);
sfTransform sfText_getInverseTransform(const sfText * text);
void sfText_setString(sfText * text, const char * string);
void sfText_setUnicodeString(sfText * text, const sfUint32 * string);
void sfText_setFont(sfText * text, const sfFont * font);
void sfText_setCharacterSize(sfText * text, unsigned int size);
void sfText_setLineSpacing(sfText * text, float spacingFactor);
void sfText_setLetterSpacing(sfText * text, float spacingFactor);
void sfText_setStyle(sfText * text, sfUint32 style);
void sfText_setColor(sfText * text, sfColor color);
void sfText_setFillColor(sfText * text, sfColor color);
void sfText_setOutlineColor(sfText * text, sfColor color);
void sfText_setOutlineThickness(sfText * text, float thickness);
const char * sfText_getString(const sfText * text);
const sfUint32 * sfText_getUnicodeString(const sfText * text);
const sfFont * sfText_getFont(const sfText * text);
unsigned int sfText_getCharacterSize(const sfText * text);
float sfText_getLetterSpacing(const sfText * text);
float sfText_getLineSpacing(const sfText * text);
sfUint32 sfText_getStyle(const sfText * text);
sfColor sfText_getColor(const sfText * text);
sfColor sfText_getFillColor(const sfText * text);
sfColor sfText_getOutlineColor(const sfText * text);
float sfText_getOutlineThickness(const sfText * text);
sfVector2f sfText_findCharacterPos(const sfText * text, size_t index);
sfFloatRect sfText_getLocalBounds(const sfText * text);
sfFloatRect sfText_getGlobalBounds(const sfText * text);
sfTexture * sfTexture_create(unsigned int width, unsigned int height);
sfTexture * sfTexture_createFromFile(const char * filename, const sfIntRect * area);
sfTexture * sfTexture_createFromMemory(const void * data, size_t sizeInBytes, const sfIntRect * area);
sfTexture * sfTexture_createFromStream(sfInputStream * stream, const sfIntRect * area);
sfTexture * sfTexture_createFromImage(const sfImage * image, const sfIntRect * area);
sfTexture * sfTexture_copy(const sfTexture * texture);
void sfTexture_destroy(sfTexture * texture);
sfVector2u sfTexture_getSize(const sfTexture * texture);
sfImage * sfTexture_copyToImage(const sfTexture * texture);
void sfTexture_updateFromPixels(sfTexture * texture, const sfUint8 * pixels, unsigned int width, unsigned int height, unsigned int x, unsigned int y);
void sfTexture_updateFromTexture(sfTexture * destination, const sfTexture * source, unsigned int x, unsigned int y);
void sfTexture_updateFromImage(sfTexture * texture, const sfImage * image, unsigned int x, unsigned int y);
void sfTexture_updateFromWindow(sfTexture * texture, const sfWindow * window, unsigned int x, unsigned int y);
void sfTexture_updateFromRenderWindow(sfTexture * texture, const sfRenderWindow * renderWindow, unsigned int x, unsigned int y);
void sfTexture_setSmooth(sfTexture * texture, sfBool smooth);
bool sfTexture_isSmooth(const sfTexture * texture);
void sfTexture_setSrgb(sfTexture * texture, sfBool sRgb);
bool sfTexture_isSrgb(const sfTexture * texture);
void sfTexture_setRepeated(sfTexture * texture, sfBool repeated);
bool sfTexture_isRepeated(const sfTexture * texture);
bool sfTexture_generateMipmap(sfTexture * texture);
void sfTexture_swap(sfTexture * left, sfTexture * right);
unsigned int sfTexture_getNativeHandle(const sfTexture * texture);
void sfTexture_bind(const sfTexture * texture);
unsigned int sfTexture_getMaximumSize();
sfTransformable * sfTransformable_create();
sfTransformable * sfTransformable_copy(const sfTransformable * transformable);
void sfTransformable_destroy(sfTransformable * transformable);
void sfTransformable_setPosition(sfTransformable * transformable, sfVector2f position);
void sfTransformable_setRotation(sfTransformable * transformable, float angle);
void sfTransformable_setScale(sfTransformable * transformable, sfVector2f scale);
void sfTransformable_setOrigin(sfTransformable * transformable, sfVector2f origin);
sfVector2f sfTransformable_getPosition(const sfTransformable * transformable);
float sfTransformable_getRotation(const sfTransformable * transformable);
sfVector2f sfTransformable_getScale(const sfTransformable * transformable);
sfVector2f sfTransformable_getOrigin(const sfTransformable * transformable);
void sfTransformable_move(sfTransformable * transformable, sfVector2f offset);
void sfTransformable_rotate(sfTransformable * transformable, float angle);
void sfTransformable_scale(sfTransformable * transformable, sfVector2f factors);
sfTransform sfTransformable_getTransform(const sfTransformable * transformable);
sfTransform sfTransformable_getInverseTransform(const sfTransformable * transformable);
sfVertexArray * sfVertexArray_create();
sfVertexArray * sfVertexArray_copy(const sfVertexArray * vertexArray);
void sfVertexArray_destroy(sfVertexArray * vertexArray);
size_t sfVertexArray_getVertexCount(const sfVertexArray * vertexArray);
sfVertex * sfVertexArray_getVertex(sfVertexArray * vertexArray, size_t index);
void sfVertexArray_clear(sfVertexArray * vertexArray);
void sfVertexArray_resize(sfVertexArray * vertexArray, size_t vertexCount);
void sfVertexArray_append(sfVertexArray * vertexArray, sfVertex vertex);
void sfVertexArray_setPrimitiveType(sfVertexArray * vertexArray, sfPrimitiveType type);
sfPrimitiveType sfVertexArray_getPrimitiveType(sfVertexArray * vertexArray);
sfFloatRect sfVertexArray_getBounds(sfVertexArray * vertexArray);
typedef enum  {
  sfVertexBufferStream = 0,
  sfVertexBufferDynamic = 1,
  sfVertexBufferStatic = 2,
} sfVertexBufferUsage;

sfVertexBuffer * sfVertexBuffer_create(unsigned int vertexCount, sfPrimitiveType type, sfVertexBufferUsage usage);
sfVertexBuffer * sfVertexBuffer_copy(const sfVertexBuffer * vertexBuffer);
void sfVertexBuffer_destroy(sfVertexBuffer * vertexBuffer);
unsigned int sfVertexBuffer_getVertexCount(const sfVertexBuffer * vertexBuffer);
bool sfVertexBuffer_update(sfVertexBuffer * vertexBuffer, const sfVertex * vertices, unsigned int vertexCount, unsigned int offset);
bool sfVertexBuffer_updateFromVertexBuffer(sfVertexBuffer * vertexBuffer, const sfVertexBuffer * other);
void sfVertexBuffer_swap(sfVertexBuffer * left, sfVertexBuffer * right);
unsigned int sfVertexBuffer_getNativeHandle(sfVertexBuffer * vertexBuffer);
void sfVertexBuffer_setPrimitiveType(sfVertexBuffer * vertexBuffer, sfPrimitiveType type);
sfPrimitiveType sfVertexBuffer_getPrimitiveType(const sfVertexBuffer * vertexBuffer);
void sfVertexBuffer_setUsage(sfVertexBuffer * vertexBuffer, sfVertexBufferUsage usage);
sfVertexBufferUsage sfVertexBuffer_getUsage(const sfVertexBuffer * vertexBuffer);
void sfVertexBuffer_bind(const sfVertexBuffer * vertexBuffer);
bool sfVertexBuffer_isAvailable();
sfView * sfView_create();
sfView * sfView_createFromRect(sfFloatRect rectangle);
sfView * sfView_copy(const sfView * view);
void sfView_destroy(sfView * view);
void sfView_setCenter(sfView * view, sfVector2f center);
void sfView_setSize(sfView * view, sfVector2f size);
void sfView_setRotation(sfView * view, float angle);
void sfView_setViewport(sfView * view, sfFloatRect viewport);
void sfView_reset(sfView * view, sfFloatRect rectangle);
sfVector2f sfView_getCenter(const sfView * view);
sfVector2f sfView_getSize(const sfView * view);
float sfView_getRotation(const sfView * view);
sfFloatRect sfView_getViewport(const sfView * view);
void sfView_move(sfView * view, sfVector2f offset);
void sfView_rotate(sfView * view, float angle);
void sfView_zoom(sfView * view, float factor);
]=]

local c_lib = ffi.load('csfml-graphics', true)
local lua_lib = setmetatable({ c_lib = c_lib }, { __index = c_lib })
lua_lib.BlendMode = ffi.metatype('sfBlendMode', {
  __name = 'sfBlendMode',
})
lua_lib.Color = ffi.metatype('sfColor', {
  __name = 'sfColor',
  __index = {
    toInteger = c_lib.sfColor_toInteger,
    add = c_lib.sfColor_add,
    subtract = c_lib.sfColor_subtract,
    modulate = c_lib.sfColor_modulate,
  },
})
lua_lib.FloatRect = ffi.metatype('sfFloatRect', {
  __name = 'sfFloatRect',
  __index = {
    contains = c_lib.sfFloatRect_contains,
    intersects = c_lib.sfFloatRect_intersects,
  },
})
lua_lib.IntRect = ffi.metatype('sfIntRect', {
  __name = 'sfIntRect',
  __index = {
    contains = c_lib.sfIntRect_contains,
    intersects = c_lib.sfIntRect_intersects,
  },
})
lua_lib.CircleShape = ffi.metatype('sfCircleShape', {
  __name = 'sfCircleShape',
  __gc = c_lib.sfCircleShape_destroy,
  __index = {
    copy = c_lib.sfCircleShape_copy,
    setPosition = c_lib.sfCircleShape_setPosition,
    setRotation = c_lib.sfCircleShape_setRotation,
    setScale = c_lib.sfCircleShape_setScale,
    setOrigin = c_lib.sfCircleShape_setOrigin,
    getPosition = c_lib.sfCircleShape_getPosition,
    getRotation = c_lib.sfCircleShape_getRotation,
    getScale = c_lib.sfCircleShape_getScale,
    getOrigin = c_lib.sfCircleShape_getOrigin,
    move = c_lib.sfCircleShape_move,
    rotate = c_lib.sfCircleShape_rotate,
    scale = c_lib.sfCircleShape_scale,
    getTransform = c_lib.sfCircleShape_getTransform,
    getInverseTransform = c_lib.sfCircleShape_getInverseTransform,
    setTexture = c_lib.sfCircleShape_setTexture,
    setTextureRect = c_lib.sfCircleShape_setTextureRect,
    setFillColor = c_lib.sfCircleShape_setFillColor,
    setOutlineColor = c_lib.sfCircleShape_setOutlineColor,
    setOutlineThickness = c_lib.sfCircleShape_setOutlineThickness,
    getTexture = c_lib.sfCircleShape_getTexture,
    getTextureRect = c_lib.sfCircleShape_getTextureRect,
    getFillColor = c_lib.sfCircleShape_getFillColor,
    getOutlineColor = c_lib.sfCircleShape_getOutlineColor,
    getOutlineThickness = c_lib.sfCircleShape_getOutlineThickness,
    getPointCount = c_lib.sfCircleShape_getPointCount,
    getPoint = c_lib.sfCircleShape_getPoint,
    setRadius = c_lib.sfCircleShape_setRadius,
    getRadius = c_lib.sfCircleShape_getRadius,
    setPointCount = c_lib.sfCircleShape_setPointCount,
    getLocalBounds = c_lib.sfCircleShape_getLocalBounds,
    getGlobalBounds = c_lib.sfCircleShape_getGlobalBounds,
  },
})
lua_lib.ConvexShape = ffi.metatype('sfConvexShape', {
  __name = 'sfConvexShape',
  __gc = c_lib.sfConvexShape_destroy,
  __index = {
    copy = c_lib.sfConvexShape_copy,
    setPosition = c_lib.sfConvexShape_setPosition,
    setRotation = c_lib.sfConvexShape_setRotation,
    setScale = c_lib.sfConvexShape_setScale,
    setOrigin = c_lib.sfConvexShape_setOrigin,
    getPosition = c_lib.sfConvexShape_getPosition,
    getRotation = c_lib.sfConvexShape_getRotation,
    getScale = c_lib.sfConvexShape_getScale,
    getOrigin = c_lib.sfConvexShape_getOrigin,
    move = c_lib.sfConvexShape_move,
    rotate = c_lib.sfConvexShape_rotate,
    scale = c_lib.sfConvexShape_scale,
    getTransform = c_lib.sfConvexShape_getTransform,
    getInverseTransform = c_lib.sfConvexShape_getInverseTransform,
    setTexture = c_lib.sfConvexShape_setTexture,
    setTextureRect = c_lib.sfConvexShape_setTextureRect,
    setFillColor = c_lib.sfConvexShape_setFillColor,
    setOutlineColor = c_lib.sfConvexShape_setOutlineColor,
    setOutlineThickness = c_lib.sfConvexShape_setOutlineThickness,
    getTexture = c_lib.sfConvexShape_getTexture,
    getTextureRect = c_lib.sfConvexShape_getTextureRect,
    getFillColor = c_lib.sfConvexShape_getFillColor,
    getOutlineColor = c_lib.sfConvexShape_getOutlineColor,
    getOutlineThickness = c_lib.sfConvexShape_getOutlineThickness,
    getPointCount = c_lib.sfConvexShape_getPointCount,
    getPoint = c_lib.sfConvexShape_getPoint,
    setPointCount = c_lib.sfConvexShape_setPointCount,
    setPoint = c_lib.sfConvexShape_setPoint,
    getLocalBounds = c_lib.sfConvexShape_getLocalBounds,
    getGlobalBounds = c_lib.sfConvexShape_getGlobalBounds,
  },
})
lua_lib.Font = ffi.metatype('sfFont', {
  __name = 'sfFont',
  __gc = c_lib.sfFont_destroy,
  __index = {
    copy = c_lib.sfFont_copy,
    getGlyph = c_lib.sfFont_getGlyph,
    getKerning = c_lib.sfFont_getKerning,
    getLineSpacing = c_lib.sfFont_getLineSpacing,
    getUnderlinePosition = c_lib.sfFont_getUnderlinePosition,
    getUnderlineThickness = c_lib.sfFont_getUnderlineThickness,
    getTexture = c_lib.sfFont_getTexture,
    getInfo = c_lib.sfFont_getInfo,
  },
})
lua_lib.Image = ffi.metatype('sfImage', {
  __name = 'sfImage',
  __gc = c_lib.sfImage_destroy,
  __index = {
    copy = c_lib.sfImage_copy,
    saveToFile = c_lib.sfImage_saveToFile,
    getSize = c_lib.sfImage_getSize,
    createMaskFromColor = c_lib.sfImage_createMaskFromColor,
    copyImage = c_lib.sfImage_copyImage,
    setPixel = c_lib.sfImage_setPixel,
    getPixel = c_lib.sfImage_getPixel,
    getPixelsPtr = c_lib.sfImage_getPixelsPtr,
    flipHorizontally = c_lib.sfImage_flipHorizontally,
    flipVertically = c_lib.sfImage_flipVertically,
    Texture_createFrom = c_lib.sfTexture_createFromImage,
  },
})
lua_lib.Shader = ffi.metatype('sfShader', {
  __name = 'sfShader',
  __gc = c_lib.sfShader_destroy,
  __index = {
    setFloatUniform = c_lib.sfShader_setFloatUniform,
    setVec2Uniform = c_lib.sfShader_setVec2Uniform,
    setVec3Uniform = c_lib.sfShader_setVec3Uniform,
    setVec4Uniform = c_lib.sfShader_setVec4Uniform,
    setColorUniform = c_lib.sfShader_setColorUniform,
    setIntUniform = c_lib.sfShader_setIntUniform,
    setIvec2Uniform = c_lib.sfShader_setIvec2Uniform,
    setIvec3Uniform = c_lib.sfShader_setIvec3Uniform,
    setIvec4Uniform = c_lib.sfShader_setIvec4Uniform,
    setIntColorUniform = c_lib.sfShader_setIntColorUniform,
    setBoolUniform = c_lib.sfShader_setBoolUniform,
    setBvec2Uniform = c_lib.sfShader_setBvec2Uniform,
    setBvec3Uniform = c_lib.sfShader_setBvec3Uniform,
    setBvec4Uniform = c_lib.sfShader_setBvec4Uniform,
    setMat3Uniform = c_lib.sfShader_setMat3Uniform,
    setMat4Uniform = c_lib.sfShader_setMat4Uniform,
    setTextureUniform = c_lib.sfShader_setTextureUniform,
    setCurrentTextureUniform = c_lib.sfShader_setCurrentTextureUniform,
    setFloatUniformArray = c_lib.sfShader_setFloatUniformArray,
    setVec2UniformArray = c_lib.sfShader_setVec2UniformArray,
    setVec3UniformArray = c_lib.sfShader_setVec3UniformArray,
    setVec4UniformArray = c_lib.sfShader_setVec4UniformArray,
    setMat3UniformArray = c_lib.sfShader_setMat3UniformArray,
    setMat4UniformArray = c_lib.sfShader_setMat4UniformArray,
    setFloatParameter = c_lib.sfShader_setFloatParameter,
    setFloat2Parameter = c_lib.sfShader_setFloat2Parameter,
    setFloat3Parameter = c_lib.sfShader_setFloat3Parameter,
    setFloat4Parameter = c_lib.sfShader_setFloat4Parameter,
    setVector2Parameter = c_lib.sfShader_setVector2Parameter,
    setVector3Parameter = c_lib.sfShader_setVector3Parameter,
    setColorParameter = c_lib.sfShader_setColorParameter,
    setTransformParameter = c_lib.sfShader_setTransformParameter,
    setTextureParameter = c_lib.sfShader_setTextureParameter,
    setCurrentTextureParameter = c_lib.sfShader_setCurrentTextureParameter,
    getNativeHandle = c_lib.sfShader_getNativeHandle,
    bind = c_lib.sfShader_bind,
  },
})
lua_lib.RectangleShape = ffi.metatype('sfRectangleShape', {
  __name = 'sfRectangleShape',
  __gc = c_lib.sfRectangleShape_destroy,
  __index = {
    copy = c_lib.sfRectangleShape_copy,
    setPosition = c_lib.sfRectangleShape_setPosition,
    setRotation = c_lib.sfRectangleShape_setRotation,
    setScale = c_lib.sfRectangleShape_setScale,
    setOrigin = c_lib.sfRectangleShape_setOrigin,
    getPosition = c_lib.sfRectangleShape_getPosition,
    getRotation = c_lib.sfRectangleShape_getRotation,
    getScale = c_lib.sfRectangleShape_getScale,
    getOrigin = c_lib.sfRectangleShape_getOrigin,
    move = c_lib.sfRectangleShape_move,
    rotate = c_lib.sfRectangleShape_rotate,
    scale = c_lib.sfRectangleShape_scale,
    getTransform = c_lib.sfRectangleShape_getTransform,
    getInverseTransform = c_lib.sfRectangleShape_getInverseTransform,
    setTexture = c_lib.sfRectangleShape_setTexture,
    setTextureRect = c_lib.sfRectangleShape_setTextureRect,
    setFillColor = c_lib.sfRectangleShape_setFillColor,
    setOutlineColor = c_lib.sfRectangleShape_setOutlineColor,
    setOutlineThickness = c_lib.sfRectangleShape_setOutlineThickness,
    getTexture = c_lib.sfRectangleShape_getTexture,
    getTextureRect = c_lib.sfRectangleShape_getTextureRect,
    getFillColor = c_lib.sfRectangleShape_getFillColor,
    getOutlineColor = c_lib.sfRectangleShape_getOutlineColor,
    getOutlineThickness = c_lib.sfRectangleShape_getOutlineThickness,
    getPointCount = c_lib.sfRectangleShape_getPointCount,
    getPoint = c_lib.sfRectangleShape_getPoint,
    setSize = c_lib.sfRectangleShape_setSize,
    getSize = c_lib.sfRectangleShape_getSize,
    getLocalBounds = c_lib.sfRectangleShape_getLocalBounds,
    getGlobalBounds = c_lib.sfRectangleShape_getGlobalBounds,
  },
})
lua_lib.RenderTexture = ffi.metatype('sfRenderTexture', {
  __name = 'sfRenderTexture',
  __gc = c_lib.sfRenderTexture_destroy,
  __index = {
    getSize = c_lib.sfRenderTexture_getSize,
    setActive = c_lib.sfRenderTexture_setActive,
    display = c_lib.sfRenderTexture_display,
    clear = c_lib.sfRenderTexture_clear,
    setView = c_lib.sfRenderTexture_setView,
    getView = c_lib.sfRenderTexture_getView,
    getDefaultView = c_lib.sfRenderTexture_getDefaultView,
    getViewport = c_lib.sfRenderTexture_getViewport,
    mapPixelToCoords = c_lib.sfRenderTexture_mapPixelToCoords,
    mapCoordsToPixel = c_lib.sfRenderTexture_mapCoordsToPixel,
    drawSprite = c_lib.sfRenderTexture_drawSprite,
    drawText = c_lib.sfRenderTexture_drawText,
    drawShape = c_lib.sfRenderTexture_drawShape,
    drawCircleShape = c_lib.sfRenderTexture_drawCircleShape,
    drawConvexShape = c_lib.sfRenderTexture_drawConvexShape,
    drawRectangleShape = c_lib.sfRenderTexture_drawRectangleShape,
    drawVertexArray = c_lib.sfRenderTexture_drawVertexArray,
    drawVertexBuffer = c_lib.sfRenderTexture_drawVertexBuffer,
    drawPrimitives = c_lib.sfRenderTexture_drawPrimitives,
    pushGLStates = c_lib.sfRenderTexture_pushGLStates,
    popGLStates = c_lib.sfRenderTexture_popGLStates,
    resetGLStates = c_lib.sfRenderTexture_resetGLStates,
    getTexture = c_lib.sfRenderTexture_getTexture,
    setSmooth = c_lib.sfRenderTexture_setSmooth,
    isSmooth = c_lib.sfRenderTexture_isSmooth,
    setRepeated = c_lib.sfRenderTexture_setRepeated,
    isRepeated = c_lib.sfRenderTexture_isRepeated,
    generateMipmap = c_lib.sfRenderTexture_generateMipmap,
  },
})
lua_lib.RenderWindow = ffi.metatype('sfRenderWindow', {
  __name = 'sfRenderWindow',
  __gc = c_lib.sfRenderWindow_destroy,
  __index = {
    close = c_lib.sfRenderWindow_close,
    isOpen = c_lib.sfRenderWindow_isOpen,
    getSettings = c_lib.sfRenderWindow_getSettings,
    pollEvent = c_lib.sfRenderWindow_pollEvent,
    waitEvent = c_lib.sfRenderWindow_waitEvent,
    getPosition = c_lib.sfRenderWindow_getPosition,
    setPosition = c_lib.sfRenderWindow_setPosition,
    getSize = c_lib.sfRenderWindow_getSize,
    setSize = c_lib.sfRenderWindow_setSize,
    setTitle = c_lib.sfRenderWindow_setTitle,
    setUnicodeTitle = c_lib.sfRenderWindow_setUnicodeTitle,
    setIcon = c_lib.sfRenderWindow_setIcon,
    setVisible = c_lib.sfRenderWindow_setVisible,
    setVerticalSyncEnabled = c_lib.sfRenderWindow_setVerticalSyncEnabled,
    setMouseCursorVisible = c_lib.sfRenderWindow_setMouseCursorVisible,
    setMouseCursorGrabbed = c_lib.sfRenderWindow_setMouseCursorGrabbed,
    setMouseCursor = c_lib.sfRenderWindow_setMouseCursor,
    setKeyRepeatEnabled = c_lib.sfRenderWindow_setKeyRepeatEnabled,
    setFramerateLimit = c_lib.sfRenderWindow_setFramerateLimit,
    setJoystickThreshold = c_lib.sfRenderWindow_setJoystickThreshold,
    setActive = c_lib.sfRenderWindow_setActive,
    requestFocus = c_lib.sfRenderWindow_requestFocus,
    hasFocus = c_lib.sfRenderWindow_hasFocus,
    display = c_lib.sfRenderWindow_display,
    getSystemHandle = c_lib.sfRenderWindow_getSystemHandle,
    clear = c_lib.sfRenderWindow_clear,
    setView = c_lib.sfRenderWindow_setView,
    getView = c_lib.sfRenderWindow_getView,
    getDefaultView = c_lib.sfRenderWindow_getDefaultView,
    getViewport = c_lib.sfRenderWindow_getViewport,
    mapPixelToCoords = c_lib.sfRenderWindow_mapPixelToCoords,
    mapCoordsToPixel = c_lib.sfRenderWindow_mapCoordsToPixel,
    drawSprite = c_lib.sfRenderWindow_drawSprite,
    drawText = c_lib.sfRenderWindow_drawText,
    drawShape = c_lib.sfRenderWindow_drawShape,
    drawCircleShape = c_lib.sfRenderWindow_drawCircleShape,
    drawConvexShape = c_lib.sfRenderWindow_drawConvexShape,
    drawRectangleShape = c_lib.sfRenderWindow_drawRectangleShape,
    drawVertexArray = c_lib.sfRenderWindow_drawVertexArray,
    drawVertexBuffer = c_lib.sfRenderWindow_drawVertexBuffer,
    drawPrimitives = c_lib.sfRenderWindow_drawPrimitives,
    pushGLStates = c_lib.sfRenderWindow_pushGLStates,
    popGLStates = c_lib.sfRenderWindow_popGLStates,
    resetGLStates = c_lib.sfRenderWindow_resetGLStates,
    capture = c_lib.sfRenderWindow_capture,
    Mouse_getPosition = c_lib.sfMouse_getPositionRenderWindow,
  },
})
lua_lib.Shape = ffi.metatype('sfShape', {
  __name = 'sfShape',
  __gc = c_lib.sfShape_destroy,
  __index = {
    setPosition = c_lib.sfShape_setPosition,
    setRotation = c_lib.sfShape_setRotation,
    setScale = c_lib.sfShape_setScale,
    setOrigin = c_lib.sfShape_setOrigin,
    getPosition = c_lib.sfShape_getPosition,
    getRotation = c_lib.sfShape_getRotation,
    getScale = c_lib.sfShape_getScale,
    getOrigin = c_lib.sfShape_getOrigin,
    move = c_lib.sfShape_move,
    rotate = c_lib.sfShape_rotate,
    scale = c_lib.sfShape_scale,
    getTransform = c_lib.sfShape_getTransform,
    getInverseTransform = c_lib.sfShape_getInverseTransform,
    setTexture = c_lib.sfShape_setTexture,
    setTextureRect = c_lib.sfShape_setTextureRect,
    setFillColor = c_lib.sfShape_setFillColor,
    setOutlineColor = c_lib.sfShape_setOutlineColor,
    setOutlineThickness = c_lib.sfShape_setOutlineThickness,
    getTexture = c_lib.sfShape_getTexture,
    getTextureRect = c_lib.sfShape_getTextureRect,
    getFillColor = c_lib.sfShape_getFillColor,
    getOutlineColor = c_lib.sfShape_getOutlineColor,
    getOutlineThickness = c_lib.sfShape_getOutlineThickness,
    getPointCount = c_lib.sfShape_getPointCount,
    getPoint = c_lib.sfShape_getPoint,
    getLocalBounds = c_lib.sfShape_getLocalBounds,
    getGlobalBounds = c_lib.sfShape_getGlobalBounds,
    update = c_lib.sfShape_update,
  },
})
lua_lib.Sprite = ffi.metatype('sfSprite', {
  __name = 'sfSprite',
  __gc = c_lib.sfSprite_destroy,
  __index = {
    copy = c_lib.sfSprite_copy,
    setPosition = c_lib.sfSprite_setPosition,
    setRotation = c_lib.sfSprite_setRotation,
    setScale = c_lib.sfSprite_setScale,
    setOrigin = c_lib.sfSprite_setOrigin,
    getPosition = c_lib.sfSprite_getPosition,
    getRotation = c_lib.sfSprite_getRotation,
    getScale = c_lib.sfSprite_getScale,
    getOrigin = c_lib.sfSprite_getOrigin,
    move = c_lib.sfSprite_move,
    rotate = c_lib.sfSprite_rotate,
    scale = c_lib.sfSprite_scale,
    getTransform = c_lib.sfSprite_getTransform,
    getInverseTransform = c_lib.sfSprite_getInverseTransform,
    setTexture = c_lib.sfSprite_setTexture,
    setTextureRect = c_lib.sfSprite_setTextureRect,
    setColor = c_lib.sfSprite_setColor,
    getTexture = c_lib.sfSprite_getTexture,
    getTextureRect = c_lib.sfSprite_getTextureRect,
    getColor = c_lib.sfSprite_getColor,
    getLocalBounds = c_lib.sfSprite_getLocalBounds,
    getGlobalBounds = c_lib.sfSprite_getGlobalBounds,
  },
})
lua_lib.Text = ffi.metatype('sfText', {
  __name = 'sfText',
  __gc = c_lib.sfText_destroy,
  __index = {
    copy = c_lib.sfText_copy,
    setPosition = c_lib.sfText_setPosition,
    setRotation = c_lib.sfText_setRotation,
    setScale = c_lib.sfText_setScale,
    setOrigin = c_lib.sfText_setOrigin,
    getPosition = c_lib.sfText_getPosition,
    getRotation = c_lib.sfText_getRotation,
    getScale = c_lib.sfText_getScale,
    getOrigin = c_lib.sfText_getOrigin,
    move = c_lib.sfText_move,
    rotate = c_lib.sfText_rotate,
    scale = c_lib.sfText_scale,
    getTransform = c_lib.sfText_getTransform,
    getInverseTransform = c_lib.sfText_getInverseTransform,
    setString = c_lib.sfText_setString,
    setUnicodeString = c_lib.sfText_setUnicodeString,
    setFont = c_lib.sfText_setFont,
    setCharacterSize = c_lib.sfText_setCharacterSize,
    setLineSpacing = c_lib.sfText_setLineSpacing,
    setLetterSpacing = c_lib.sfText_setLetterSpacing,
    setStyle = c_lib.sfText_setStyle,
    setColor = c_lib.sfText_setColor,
    setFillColor = c_lib.sfText_setFillColor,
    setOutlineColor = c_lib.sfText_setOutlineColor,
    setOutlineThickness = c_lib.sfText_setOutlineThickness,
    getString = c_lib.sfText_getString,
    getUnicodeString = c_lib.sfText_getUnicodeString,
    getFont = c_lib.sfText_getFont,
    getCharacterSize = c_lib.sfText_getCharacterSize,
    getLetterSpacing = c_lib.sfText_getLetterSpacing,
    getLineSpacing = c_lib.sfText_getLineSpacing,
    getStyle = c_lib.sfText_getStyle,
    getColor = c_lib.sfText_getColor,
    getFillColor = c_lib.sfText_getFillColor,
    getOutlineColor = c_lib.sfText_getOutlineColor,
    getOutlineThickness = c_lib.sfText_getOutlineThickness,
    findCharacterPos = c_lib.sfText_findCharacterPos,
    getLocalBounds = c_lib.sfText_getLocalBounds,
    getGlobalBounds = c_lib.sfText_getGlobalBounds,
  },
})
lua_lib.Texture = ffi.metatype('sfTexture', {
  __name = 'sfTexture',
  __gc = c_lib.sfTexture_destroy,
  __index = {
    copy = c_lib.sfTexture_copy,
    getSize = c_lib.sfTexture_getSize,
    copyToImage = c_lib.sfTexture_copyToImage,
    updateFromPixels = c_lib.sfTexture_updateFromPixels,
    updateFromTexture = c_lib.sfTexture_updateFromTexture,
    updateFromImage = c_lib.sfTexture_updateFromImage,
    updateFromWindow = c_lib.sfTexture_updateFromWindow,
    updateFromRenderWindow = c_lib.sfTexture_updateFromRenderWindow,
    setSmooth = c_lib.sfTexture_setSmooth,
    isSmooth = c_lib.sfTexture_isSmooth,
    setSrgb = c_lib.sfTexture_setSrgb,
    isSrgb = c_lib.sfTexture_isSrgb,
    setRepeated = c_lib.sfTexture_setRepeated,
    isRepeated = c_lib.sfTexture_isRepeated,
    generateMipmap = c_lib.sfTexture_generateMipmap,
    swap = c_lib.sfTexture_swap,
    getNativeHandle = c_lib.sfTexture_getNativeHandle,
    bind = c_lib.sfTexture_bind,
  },
})
lua_lib.Transformable = ffi.metatype('sfTransformable', {
  __name = 'sfTransformable',
  __gc = c_lib.sfTransformable_destroy,
  __index = {
    copy = c_lib.sfTransformable_copy,
    setPosition = c_lib.sfTransformable_setPosition,
    setRotation = c_lib.sfTransformable_setRotation,
    setScale = c_lib.sfTransformable_setScale,
    setOrigin = c_lib.sfTransformable_setOrigin,
    getPosition = c_lib.sfTransformable_getPosition,
    getRotation = c_lib.sfTransformable_getRotation,
    getScale = c_lib.sfTransformable_getScale,
    getOrigin = c_lib.sfTransformable_getOrigin,
    move = c_lib.sfTransformable_move,
    rotate = c_lib.sfTransformable_rotate,
    scale = c_lib.sfTransformable_scale,
    getTransform = c_lib.sfTransformable_getTransform,
    getInverseTransform = c_lib.sfTransformable_getInverseTransform,
  },
})
lua_lib.VertexArray = ffi.metatype('sfVertexArray', {
  __name = 'sfVertexArray',
  __gc = c_lib.sfVertexArray_destroy,
  __index = {
    copy = c_lib.sfVertexArray_copy,
    getVertexCount = c_lib.sfVertexArray_getVertexCount,
    getVertex = c_lib.sfVertexArray_getVertex,
    clear = c_lib.sfVertexArray_clear,
    resize = c_lib.sfVertexArray_resize,
    append = c_lib.sfVertexArray_append,
    setPrimitiveType = c_lib.sfVertexArray_setPrimitiveType,
    getPrimitiveType = c_lib.sfVertexArray_getPrimitiveType,
    getBounds = c_lib.sfVertexArray_getBounds,
  },
})
lua_lib.VertexBuffer = ffi.metatype('sfVertexBuffer', {
  __name = 'sfVertexBuffer',
  __gc = c_lib.sfVertexBuffer_destroy,
  __index = {
    copy = c_lib.sfVertexBuffer_copy,
    getVertexCount = c_lib.sfVertexBuffer_getVertexCount,
    update = c_lib.sfVertexBuffer_update,
    updateFromVertexBuffer = c_lib.sfVertexBuffer_updateFromVertexBuffer,
    swap = c_lib.sfVertexBuffer_swap,
    getNativeHandle = c_lib.sfVertexBuffer_getNativeHandle,
    setPrimitiveType = c_lib.sfVertexBuffer_setPrimitiveType,
    getPrimitiveType = c_lib.sfVertexBuffer_getPrimitiveType,
    setUsage = c_lib.sfVertexBuffer_setUsage,
    getUsage = c_lib.sfVertexBuffer_getUsage,
    bind = c_lib.sfVertexBuffer_bind,
  },
})
lua_lib.View = ffi.metatype('sfView', {
  __name = 'sfView',
  __gc = c_lib.sfView_destroy,
  __index = {
    copy = c_lib.sfView_copy,
    setCenter = c_lib.sfView_setCenter,
    setSize = c_lib.sfView_setSize,
    setRotation = c_lib.sfView_setRotation,
    setViewport = c_lib.sfView_setViewport,
    reset = c_lib.sfView_reset,
    getCenter = c_lib.sfView_getCenter,
    getSize = c_lib.sfView_getSize,
    getRotation = c_lib.sfView_getRotation,
    getViewport = c_lib.sfView_getViewport,
    move = c_lib.sfView_move,
    rotate = c_lib.sfView_rotate,
    zoom = c_lib.sfView_zoom,
  },
})
lua_lib.Transform = ffi.metatype('sfTransform', {
  __name = 'sfTransform',
  __index = {
    getMatrix = c_lib.sfTransform_getMatrix,
    getInverse = c_lib.sfTransform_getInverse,
    transformPoint = c_lib.sfTransform_transformPoint,
    transformRect = c_lib.sfTransform_transformRect,
    combine = c_lib.sfTransform_combine,
    translate = c_lib.sfTransform_translate,
    rotate = c_lib.sfTransform_rotate,
    rotateWithCenter = c_lib.sfTransform_rotateWithCenter,
    scale = c_lib.sfTransform_scale,
    scaleWithCenter = c_lib.sfTransform_scaleWithCenter,
    equal = c_lib.sfTransform_equal,
  },
})
lua_lib.FontInfo = ffi.metatype('sfFontInfo', {
  __name = 'sfFontInfo',
})
lua_lib.Glyph = ffi.metatype('sfGlyph', {
  __name = 'sfGlyph',
})
lua_lib.RenderStates = ffi.metatype('sfRenderStates', {
  __name = 'sfRenderStates',
})
lua_lib.Vertex = ffi.metatype('sfVertex', {
  __name = 'sfVertex',
})
lua_lib.GlslBvec2 = ffi.metatype('sfGlslBvec2', {
  __name = 'sfGlslBvec2',
})
lua_lib.GlslIvec3 = ffi.metatype('sfGlslIvec3', {
  __name = 'sfGlslIvec3',
})
lua_lib.GlslBvec3 = ffi.metatype('sfGlslBvec3', {
  __name = 'sfGlslBvec3',
})
lua_lib.GlslVec4 = ffi.metatype('sfGlslVec4', {
  __name = 'sfGlslVec4',
})
lua_lib.GlslIvec4 = ffi.metatype('sfGlslIvec4', {
  __name = 'sfGlslIvec4',
})
lua_lib.GlslBvec4 = ffi.metatype('sfGlslBvec4', {
  __name = 'sfGlslBvec4',
})
lua_lib.GlslMat3 = ffi.metatype('sfGlslMat3', {
  __name = 'sfGlslMat3',
})
lua_lib.GlslMat4 = ffi.metatype('sfGlslMat4', {
  __name = 'sfGlslMat4',
})
lua_lib.BlendAlpha = lua_lib.sfBlendAlpha
lua_lib.BlendAdd = lua_lib.sfBlendAdd
lua_lib.BlendMultiply = lua_lib.sfBlendMultiply
lua_lib.BlendNone = lua_lib.sfBlendNone
lua_lib.Black = lua_lib.sfBlack
lua_lib.White = lua_lib.sfWhite
lua_lib.Red = lua_lib.sfRed
lua_lib.Green = lua_lib.sfGreen
lua_lib.Blue = lua_lib.sfBlue
lua_lib.Yellow = lua_lib.sfYellow
lua_lib.Magenta = lua_lib.sfMagenta
lua_lib.Cyan = lua_lib.sfCyan
lua_lib.Transparent = lua_lib.sfTransparent
lua_lib.Color_fromRGB = lua_lib.sfColor_fromRGB
lua_lib.Color_fromRGBA = lua_lib.sfColor_fromRGBA
lua_lib.Color_fromInteger = lua_lib.sfColor_fromInteger
lua_lib.Color_toInteger = lua_lib.sfColor_toInteger
lua_lib.Color_add = lua_lib.sfColor_add
lua_lib.Color_subtract = lua_lib.sfColor_subtract
lua_lib.Color_modulate = lua_lib.sfColor_modulate
lua_lib.FloatRect_contains = lua_lib.sfFloatRect_contains
lua_lib.IntRect_contains = lua_lib.sfIntRect_contains
lua_lib.FloatRect_intersects = lua_lib.sfFloatRect_intersects
lua_lib.IntRect_intersects = lua_lib.sfIntRect_intersects
lua_lib.Transform_Identity = lua_lib.sfTransform_Identity
lua_lib.Transform_fromMatrix = lua_lib.sfTransform_fromMatrix
lua_lib.Transform_getMatrix = lua_lib.sfTransform_getMatrix
lua_lib.Transform_getInverse = lua_lib.sfTransform_getInverse
lua_lib.Transform_transformPoint = lua_lib.sfTransform_transformPoint
lua_lib.Transform_transformRect = lua_lib.sfTransform_transformRect
lua_lib.Transform_combine = lua_lib.sfTransform_combine
lua_lib.Transform_translate = lua_lib.sfTransform_translate
lua_lib.Transform_rotate = lua_lib.sfTransform_rotate
lua_lib.Transform_rotateWithCenter = lua_lib.sfTransform_rotateWithCenter
lua_lib.Transform_scale = lua_lib.sfTransform_scale
lua_lib.Transform_scaleWithCenter = lua_lib.sfTransform_scaleWithCenter
lua_lib.Transform_equal = lua_lib.sfTransform_equal
lua_lib.CircleShape_create = lua_lib.sfCircleShape_create
lua_lib.CircleShape_copy = lua_lib.sfCircleShape_copy
lua_lib.CircleShape_destroy = lua_lib.sfCircleShape_destroy
lua_lib.CircleShape_setPosition = lua_lib.sfCircleShape_setPosition
lua_lib.CircleShape_setRotation = lua_lib.sfCircleShape_setRotation
lua_lib.CircleShape_setScale = lua_lib.sfCircleShape_setScale
lua_lib.CircleShape_setOrigin = lua_lib.sfCircleShape_setOrigin
lua_lib.CircleShape_getPosition = lua_lib.sfCircleShape_getPosition
lua_lib.CircleShape_getRotation = lua_lib.sfCircleShape_getRotation
lua_lib.CircleShape_getScale = lua_lib.sfCircleShape_getScale
lua_lib.CircleShape_getOrigin = lua_lib.sfCircleShape_getOrigin
lua_lib.CircleShape_move = lua_lib.sfCircleShape_move
lua_lib.CircleShape_rotate = lua_lib.sfCircleShape_rotate
lua_lib.CircleShape_scale = lua_lib.sfCircleShape_scale
lua_lib.CircleShape_getTransform = lua_lib.sfCircleShape_getTransform
lua_lib.CircleShape_getInverseTransform = lua_lib.sfCircleShape_getInverseTransform
lua_lib.CircleShape_setTexture = lua_lib.sfCircleShape_setTexture
lua_lib.CircleShape_setTextureRect = lua_lib.sfCircleShape_setTextureRect
lua_lib.CircleShape_setFillColor = lua_lib.sfCircleShape_setFillColor
lua_lib.CircleShape_setOutlineColor = lua_lib.sfCircleShape_setOutlineColor
lua_lib.CircleShape_setOutlineThickness = lua_lib.sfCircleShape_setOutlineThickness
lua_lib.CircleShape_getTexture = lua_lib.sfCircleShape_getTexture
lua_lib.CircleShape_getTextureRect = lua_lib.sfCircleShape_getTextureRect
lua_lib.CircleShape_getFillColor = lua_lib.sfCircleShape_getFillColor
lua_lib.CircleShape_getOutlineColor = lua_lib.sfCircleShape_getOutlineColor
lua_lib.CircleShape_getOutlineThickness = lua_lib.sfCircleShape_getOutlineThickness
lua_lib.CircleShape_getPointCount = lua_lib.sfCircleShape_getPointCount
lua_lib.CircleShape_getPoint = lua_lib.sfCircleShape_getPoint
lua_lib.CircleShape_setRadius = lua_lib.sfCircleShape_setRadius
lua_lib.CircleShape_getRadius = lua_lib.sfCircleShape_getRadius
lua_lib.CircleShape_setPointCount = lua_lib.sfCircleShape_setPointCount
lua_lib.CircleShape_getLocalBounds = lua_lib.sfCircleShape_getLocalBounds
lua_lib.CircleShape_getGlobalBounds = lua_lib.sfCircleShape_getGlobalBounds
lua_lib.ConvexShape_create = lua_lib.sfConvexShape_create
lua_lib.ConvexShape_copy = lua_lib.sfConvexShape_copy
lua_lib.ConvexShape_destroy = lua_lib.sfConvexShape_destroy
lua_lib.ConvexShape_setPosition = lua_lib.sfConvexShape_setPosition
lua_lib.ConvexShape_setRotation = lua_lib.sfConvexShape_setRotation
lua_lib.ConvexShape_setScale = lua_lib.sfConvexShape_setScale
lua_lib.ConvexShape_setOrigin = lua_lib.sfConvexShape_setOrigin
lua_lib.ConvexShape_getPosition = lua_lib.sfConvexShape_getPosition
lua_lib.ConvexShape_getRotation = lua_lib.sfConvexShape_getRotation
lua_lib.ConvexShape_getScale = lua_lib.sfConvexShape_getScale
lua_lib.ConvexShape_getOrigin = lua_lib.sfConvexShape_getOrigin
lua_lib.ConvexShape_move = lua_lib.sfConvexShape_move
lua_lib.ConvexShape_rotate = lua_lib.sfConvexShape_rotate
lua_lib.ConvexShape_scale = lua_lib.sfConvexShape_scale
lua_lib.ConvexShape_getTransform = lua_lib.sfConvexShape_getTransform
lua_lib.ConvexShape_getInverseTransform = lua_lib.sfConvexShape_getInverseTransform
lua_lib.ConvexShape_setTexture = lua_lib.sfConvexShape_setTexture
lua_lib.ConvexShape_setTextureRect = lua_lib.sfConvexShape_setTextureRect
lua_lib.ConvexShape_setFillColor = lua_lib.sfConvexShape_setFillColor
lua_lib.ConvexShape_setOutlineColor = lua_lib.sfConvexShape_setOutlineColor
lua_lib.ConvexShape_setOutlineThickness = lua_lib.sfConvexShape_setOutlineThickness
lua_lib.ConvexShape_getTexture = lua_lib.sfConvexShape_getTexture
lua_lib.ConvexShape_getTextureRect = lua_lib.sfConvexShape_getTextureRect
lua_lib.ConvexShape_getFillColor = lua_lib.sfConvexShape_getFillColor
lua_lib.ConvexShape_getOutlineColor = lua_lib.sfConvexShape_getOutlineColor
lua_lib.ConvexShape_getOutlineThickness = lua_lib.sfConvexShape_getOutlineThickness
lua_lib.ConvexShape_getPointCount = lua_lib.sfConvexShape_getPointCount
lua_lib.ConvexShape_getPoint = lua_lib.sfConvexShape_getPoint
lua_lib.ConvexShape_setPointCount = lua_lib.sfConvexShape_setPointCount
lua_lib.ConvexShape_setPoint = lua_lib.sfConvexShape_setPoint
lua_lib.ConvexShape_getLocalBounds = lua_lib.sfConvexShape_getLocalBounds
lua_lib.ConvexShape_getGlobalBounds = lua_lib.sfConvexShape_getGlobalBounds
lua_lib.Font_createFromFile = lua_lib.sfFont_createFromFile
lua_lib.Font_createFromMemory = lua_lib.sfFont_createFromMemory
lua_lib.Font_createFromStream = lua_lib.sfFont_createFromStream
lua_lib.Font_copy = lua_lib.sfFont_copy
lua_lib.Font_destroy = lua_lib.sfFont_destroy
lua_lib.Font_getGlyph = lua_lib.sfFont_getGlyph
lua_lib.Font_getKerning = lua_lib.sfFont_getKerning
lua_lib.Font_getLineSpacing = lua_lib.sfFont_getLineSpacing
lua_lib.Font_getUnderlinePosition = lua_lib.sfFont_getUnderlinePosition
lua_lib.Font_getUnderlineThickness = lua_lib.sfFont_getUnderlineThickness
lua_lib.Font_getTexture = lua_lib.sfFont_getTexture
lua_lib.Font_getInfo = lua_lib.sfFont_getInfo
lua_lib.Image_create = lua_lib.sfImage_create
lua_lib.Image_createFromColor = lua_lib.sfImage_createFromColor
lua_lib.Image_createFromPixels = lua_lib.sfImage_createFromPixels
lua_lib.Image_createFromFile = lua_lib.sfImage_createFromFile
lua_lib.Image_createFromMemory = lua_lib.sfImage_createFromMemory
lua_lib.Image_createFromStream = lua_lib.sfImage_createFromStream
lua_lib.Image_copy = lua_lib.sfImage_copy
lua_lib.Image_destroy = lua_lib.sfImage_destroy
lua_lib.Image_saveToFile = lua_lib.sfImage_saveToFile
lua_lib.Image_getSize = lua_lib.sfImage_getSize
lua_lib.Image_createMaskFromColor = lua_lib.sfImage_createMaskFromColor
lua_lib.Image_copyImage = lua_lib.sfImage_copyImage
lua_lib.Image_setPixel = lua_lib.sfImage_setPixel
lua_lib.Image_getPixel = lua_lib.sfImage_getPixel
lua_lib.Image_getPixelsPtr = lua_lib.sfImage_getPixelsPtr
lua_lib.Image_flipHorizontally = lua_lib.sfImage_flipHorizontally
lua_lib.Image_flipVertically = lua_lib.sfImage_flipVertically
lua_lib.RectangleShape_create = lua_lib.sfRectangleShape_create
lua_lib.RectangleShape_copy = lua_lib.sfRectangleShape_copy
lua_lib.RectangleShape_destroy = lua_lib.sfRectangleShape_destroy
lua_lib.RectangleShape_setPosition = lua_lib.sfRectangleShape_setPosition
lua_lib.RectangleShape_setRotation = lua_lib.sfRectangleShape_setRotation
lua_lib.RectangleShape_setScale = lua_lib.sfRectangleShape_setScale
lua_lib.RectangleShape_setOrigin = lua_lib.sfRectangleShape_setOrigin
lua_lib.RectangleShape_getPosition = lua_lib.sfRectangleShape_getPosition
lua_lib.RectangleShape_getRotation = lua_lib.sfRectangleShape_getRotation
lua_lib.RectangleShape_getScale = lua_lib.sfRectangleShape_getScale
lua_lib.RectangleShape_getOrigin = lua_lib.sfRectangleShape_getOrigin
lua_lib.RectangleShape_move = lua_lib.sfRectangleShape_move
lua_lib.RectangleShape_rotate = lua_lib.sfRectangleShape_rotate
lua_lib.RectangleShape_scale = lua_lib.sfRectangleShape_scale
lua_lib.RectangleShape_getTransform = lua_lib.sfRectangleShape_getTransform
lua_lib.RectangleShape_getInverseTransform = lua_lib.sfRectangleShape_getInverseTransform
lua_lib.RectangleShape_setTexture = lua_lib.sfRectangleShape_setTexture
lua_lib.RectangleShape_setTextureRect = lua_lib.sfRectangleShape_setTextureRect
lua_lib.RectangleShape_setFillColor = lua_lib.sfRectangleShape_setFillColor
lua_lib.RectangleShape_setOutlineColor = lua_lib.sfRectangleShape_setOutlineColor
lua_lib.RectangleShape_setOutlineThickness = lua_lib.sfRectangleShape_setOutlineThickness
lua_lib.RectangleShape_getTexture = lua_lib.sfRectangleShape_getTexture
lua_lib.RectangleShape_getTextureRect = lua_lib.sfRectangleShape_getTextureRect
lua_lib.RectangleShape_getFillColor = lua_lib.sfRectangleShape_getFillColor
lua_lib.RectangleShape_getOutlineColor = lua_lib.sfRectangleShape_getOutlineColor
lua_lib.RectangleShape_getOutlineThickness = lua_lib.sfRectangleShape_getOutlineThickness
lua_lib.RectangleShape_getPointCount = lua_lib.sfRectangleShape_getPointCount
lua_lib.RectangleShape_getPoint = lua_lib.sfRectangleShape_getPoint
lua_lib.RectangleShape_setSize = lua_lib.sfRectangleShape_setSize
lua_lib.RectangleShape_getSize = lua_lib.sfRectangleShape_getSize
lua_lib.RectangleShape_getLocalBounds = lua_lib.sfRectangleShape_getLocalBounds
lua_lib.RectangleShape_getGlobalBounds = lua_lib.sfRectangleShape_getGlobalBounds
lua_lib.RenderTexture_create = lua_lib.sfRenderTexture_create
lua_lib.RenderTexture_createWithSettings = lua_lib.sfRenderTexture_createWithSettings
lua_lib.RenderTexture_destroy = lua_lib.sfRenderTexture_destroy
lua_lib.RenderTexture_getSize = lua_lib.sfRenderTexture_getSize
lua_lib.RenderTexture_setActive = lua_lib.sfRenderTexture_setActive
lua_lib.RenderTexture_display = lua_lib.sfRenderTexture_display
lua_lib.RenderTexture_clear = lua_lib.sfRenderTexture_clear
lua_lib.RenderTexture_setView = lua_lib.sfRenderTexture_setView
lua_lib.RenderTexture_getView = lua_lib.sfRenderTexture_getView
lua_lib.RenderTexture_getDefaultView = lua_lib.sfRenderTexture_getDefaultView
lua_lib.RenderTexture_getViewport = lua_lib.sfRenderTexture_getViewport
lua_lib.RenderTexture_mapPixelToCoords = lua_lib.sfRenderTexture_mapPixelToCoords
lua_lib.RenderTexture_mapCoordsToPixel = lua_lib.sfRenderTexture_mapCoordsToPixel
lua_lib.RenderTexture_drawSprite = lua_lib.sfRenderTexture_drawSprite
lua_lib.RenderTexture_drawText = lua_lib.sfRenderTexture_drawText
lua_lib.RenderTexture_drawShape = lua_lib.sfRenderTexture_drawShape
lua_lib.RenderTexture_drawCircleShape = lua_lib.sfRenderTexture_drawCircleShape
lua_lib.RenderTexture_drawConvexShape = lua_lib.sfRenderTexture_drawConvexShape
lua_lib.RenderTexture_drawRectangleShape = lua_lib.sfRenderTexture_drawRectangleShape
lua_lib.RenderTexture_drawVertexArray = lua_lib.sfRenderTexture_drawVertexArray
lua_lib.RenderTexture_drawVertexBuffer = lua_lib.sfRenderTexture_drawVertexBuffer
lua_lib.RenderTexture_drawPrimitives = lua_lib.sfRenderTexture_drawPrimitives
lua_lib.RenderTexture_pushGLStates = lua_lib.sfRenderTexture_pushGLStates
lua_lib.RenderTexture_popGLStates = lua_lib.sfRenderTexture_popGLStates
lua_lib.RenderTexture_resetGLStates = lua_lib.sfRenderTexture_resetGLStates
lua_lib.RenderTexture_getTexture = lua_lib.sfRenderTexture_getTexture
lua_lib.RenderTexture_getMaximumAntialiasingLevel = lua_lib.sfRenderTexture_getMaximumAntialiasingLevel
lua_lib.RenderTexture_setSmooth = lua_lib.sfRenderTexture_setSmooth
lua_lib.RenderTexture_isSmooth = lua_lib.sfRenderTexture_isSmooth
lua_lib.RenderTexture_setRepeated = lua_lib.sfRenderTexture_setRepeated
lua_lib.RenderTexture_isRepeated = lua_lib.sfRenderTexture_isRepeated
lua_lib.RenderTexture_generateMipmap = lua_lib.sfRenderTexture_generateMipmap
lua_lib.RenderWindow_create = lua_lib.sfRenderWindow_create
lua_lib.RenderWindow_createUnicode = lua_lib.sfRenderWindow_createUnicode
lua_lib.RenderWindow_createFromHandle = lua_lib.sfRenderWindow_createFromHandle
lua_lib.RenderWindow_destroy = lua_lib.sfRenderWindow_destroy
lua_lib.RenderWindow_close = lua_lib.sfRenderWindow_close
lua_lib.RenderWindow_isOpen = lua_lib.sfRenderWindow_isOpen
lua_lib.RenderWindow_getSettings = lua_lib.sfRenderWindow_getSettings
lua_lib.RenderWindow_pollEvent = lua_lib.sfRenderWindow_pollEvent
lua_lib.RenderWindow_waitEvent = lua_lib.sfRenderWindow_waitEvent
lua_lib.RenderWindow_getPosition = lua_lib.sfRenderWindow_getPosition
lua_lib.RenderWindow_setPosition = lua_lib.sfRenderWindow_setPosition
lua_lib.RenderWindow_getSize = lua_lib.sfRenderWindow_getSize
lua_lib.RenderWindow_setSize = lua_lib.sfRenderWindow_setSize
lua_lib.RenderWindow_setTitle = lua_lib.sfRenderWindow_setTitle
lua_lib.RenderWindow_setUnicodeTitle = lua_lib.sfRenderWindow_setUnicodeTitle
lua_lib.RenderWindow_setIcon = lua_lib.sfRenderWindow_setIcon
lua_lib.RenderWindow_setVisible = lua_lib.sfRenderWindow_setVisible
lua_lib.RenderWindow_setVerticalSyncEnabled = lua_lib.sfRenderWindow_setVerticalSyncEnabled
lua_lib.RenderWindow_setMouseCursorVisible = lua_lib.sfRenderWindow_setMouseCursorVisible
lua_lib.RenderWindow_setMouseCursorGrabbed = lua_lib.sfRenderWindow_setMouseCursorGrabbed
lua_lib.RenderWindow_setMouseCursor = lua_lib.sfRenderWindow_setMouseCursor
lua_lib.RenderWindow_setKeyRepeatEnabled = lua_lib.sfRenderWindow_setKeyRepeatEnabled
lua_lib.RenderWindow_setFramerateLimit = lua_lib.sfRenderWindow_setFramerateLimit
lua_lib.RenderWindow_setJoystickThreshold = lua_lib.sfRenderWindow_setJoystickThreshold
lua_lib.RenderWindow_setActive = lua_lib.sfRenderWindow_setActive
lua_lib.RenderWindow_requestFocus = lua_lib.sfRenderWindow_requestFocus
lua_lib.RenderWindow_hasFocus = lua_lib.sfRenderWindow_hasFocus
lua_lib.RenderWindow_display = lua_lib.sfRenderWindow_display
lua_lib.RenderWindow_getSystemHandle = lua_lib.sfRenderWindow_getSystemHandle
lua_lib.RenderWindow_clear = lua_lib.sfRenderWindow_clear
lua_lib.RenderWindow_setView = lua_lib.sfRenderWindow_setView
lua_lib.RenderWindow_getView = lua_lib.sfRenderWindow_getView
lua_lib.RenderWindow_getDefaultView = lua_lib.sfRenderWindow_getDefaultView
lua_lib.RenderWindow_getViewport = lua_lib.sfRenderWindow_getViewport
lua_lib.RenderWindow_mapPixelToCoords = lua_lib.sfRenderWindow_mapPixelToCoords
lua_lib.RenderWindow_mapCoordsToPixel = lua_lib.sfRenderWindow_mapCoordsToPixel
lua_lib.RenderWindow_drawSprite = lua_lib.sfRenderWindow_drawSprite
lua_lib.RenderWindow_drawText = lua_lib.sfRenderWindow_drawText
lua_lib.RenderWindow_drawShape = lua_lib.sfRenderWindow_drawShape
lua_lib.RenderWindow_drawCircleShape = lua_lib.sfRenderWindow_drawCircleShape
lua_lib.RenderWindow_drawConvexShape = lua_lib.sfRenderWindow_drawConvexShape
lua_lib.RenderWindow_drawRectangleShape = lua_lib.sfRenderWindow_drawRectangleShape
lua_lib.RenderWindow_drawVertexArray = lua_lib.sfRenderWindow_drawVertexArray
lua_lib.RenderWindow_drawVertexBuffer = lua_lib.sfRenderWindow_drawVertexBuffer
lua_lib.RenderWindow_drawPrimitives = lua_lib.sfRenderWindow_drawPrimitives
lua_lib.RenderWindow_pushGLStates = lua_lib.sfRenderWindow_pushGLStates
lua_lib.RenderWindow_popGLStates = lua_lib.sfRenderWindow_popGLStates
lua_lib.RenderWindow_resetGLStates = lua_lib.sfRenderWindow_resetGLStates
lua_lib.RenderWindow_capture = lua_lib.sfRenderWindow_capture
lua_lib.Mouse_getPositionRenderWindow = lua_lib.sfMouse_getPositionRenderWindow
lua_lib.Mouse_setPositionRenderWindow = lua_lib.sfMouse_setPositionRenderWindow
lua_lib.Touch_getPositionRenderWindow = lua_lib.sfTouch_getPositionRenderWindow
lua_lib.Shader_createFromFile = lua_lib.sfShader_createFromFile
lua_lib.Shader_createFromMemory = lua_lib.sfShader_createFromMemory
lua_lib.Shader_createFromStream = lua_lib.sfShader_createFromStream
lua_lib.Shader_destroy = lua_lib.sfShader_destroy
lua_lib.Shader_setFloatUniform = lua_lib.sfShader_setFloatUniform
lua_lib.Shader_setVec2Uniform = lua_lib.sfShader_setVec2Uniform
lua_lib.Shader_setVec3Uniform = lua_lib.sfShader_setVec3Uniform
lua_lib.Shader_setVec4Uniform = lua_lib.sfShader_setVec4Uniform
lua_lib.Shader_setColorUniform = lua_lib.sfShader_setColorUniform
lua_lib.Shader_setIntUniform = lua_lib.sfShader_setIntUniform
lua_lib.Shader_setIvec2Uniform = lua_lib.sfShader_setIvec2Uniform
lua_lib.Shader_setIvec3Uniform = lua_lib.sfShader_setIvec3Uniform
lua_lib.Shader_setIvec4Uniform = lua_lib.sfShader_setIvec4Uniform
lua_lib.Shader_setIntColorUniform = lua_lib.sfShader_setIntColorUniform
lua_lib.Shader_setBoolUniform = lua_lib.sfShader_setBoolUniform
lua_lib.Shader_setBvec2Uniform = lua_lib.sfShader_setBvec2Uniform
lua_lib.Shader_setBvec3Uniform = lua_lib.sfShader_setBvec3Uniform
lua_lib.Shader_setBvec4Uniform = lua_lib.sfShader_setBvec4Uniform
lua_lib.Shader_setMat3Uniform = lua_lib.sfShader_setMat3Uniform
lua_lib.Shader_setMat4Uniform = lua_lib.sfShader_setMat4Uniform
lua_lib.Shader_setTextureUniform = lua_lib.sfShader_setTextureUniform
lua_lib.Shader_setCurrentTextureUniform = lua_lib.sfShader_setCurrentTextureUniform
lua_lib.Shader_setFloatUniformArray = lua_lib.sfShader_setFloatUniformArray
lua_lib.Shader_setVec2UniformArray = lua_lib.sfShader_setVec2UniformArray
lua_lib.Shader_setVec3UniformArray = lua_lib.sfShader_setVec3UniformArray
lua_lib.Shader_setVec4UniformArray = lua_lib.sfShader_setVec4UniformArray
lua_lib.Shader_setMat3UniformArray = lua_lib.sfShader_setMat3UniformArray
lua_lib.Shader_setMat4UniformArray = lua_lib.sfShader_setMat4UniformArray
lua_lib.Shader_setFloatParameter = lua_lib.sfShader_setFloatParameter
lua_lib.Shader_setFloat2Parameter = lua_lib.sfShader_setFloat2Parameter
lua_lib.Shader_setFloat3Parameter = lua_lib.sfShader_setFloat3Parameter
lua_lib.Shader_setFloat4Parameter = lua_lib.sfShader_setFloat4Parameter
lua_lib.Shader_setVector2Parameter = lua_lib.sfShader_setVector2Parameter
lua_lib.Shader_setVector3Parameter = lua_lib.sfShader_setVector3Parameter
lua_lib.Shader_setColorParameter = lua_lib.sfShader_setColorParameter
lua_lib.Shader_setTransformParameter = lua_lib.sfShader_setTransformParameter
lua_lib.Shader_setTextureParameter = lua_lib.sfShader_setTextureParameter
lua_lib.Shader_setCurrentTextureParameter = lua_lib.sfShader_setCurrentTextureParameter
lua_lib.Shader_getNativeHandle = lua_lib.sfShader_getNativeHandle
lua_lib.Shader_bind = lua_lib.sfShader_bind
lua_lib.Shader_isAvailable = lua_lib.sfShader_isAvailable
lua_lib.Shader_isGeometryAvailable = lua_lib.sfShader_isGeometryAvailable
lua_lib.Shape_create = lua_lib.sfShape_create
lua_lib.Shape_destroy = lua_lib.sfShape_destroy
lua_lib.Shape_setPosition = lua_lib.sfShape_setPosition
lua_lib.Shape_setRotation = lua_lib.sfShape_setRotation
lua_lib.Shape_setScale = lua_lib.sfShape_setScale
lua_lib.Shape_setOrigin = lua_lib.sfShape_setOrigin
lua_lib.Shape_getPosition = lua_lib.sfShape_getPosition
lua_lib.Shape_getRotation = lua_lib.sfShape_getRotation
lua_lib.Shape_getScale = lua_lib.sfShape_getScale
lua_lib.Shape_getOrigin = lua_lib.sfShape_getOrigin
lua_lib.Shape_move = lua_lib.sfShape_move
lua_lib.Shape_rotate = lua_lib.sfShape_rotate
lua_lib.Shape_scale = lua_lib.sfShape_scale
lua_lib.Shape_getTransform = lua_lib.sfShape_getTransform
lua_lib.Shape_getInverseTransform = lua_lib.sfShape_getInverseTransform
lua_lib.Shape_setTexture = lua_lib.sfShape_setTexture
lua_lib.Shape_setTextureRect = lua_lib.sfShape_setTextureRect
lua_lib.Shape_setFillColor = lua_lib.sfShape_setFillColor
lua_lib.Shape_setOutlineColor = lua_lib.sfShape_setOutlineColor
lua_lib.Shape_setOutlineThickness = lua_lib.sfShape_setOutlineThickness
lua_lib.Shape_getTexture = lua_lib.sfShape_getTexture
lua_lib.Shape_getTextureRect = lua_lib.sfShape_getTextureRect
lua_lib.Shape_getFillColor = lua_lib.sfShape_getFillColor
lua_lib.Shape_getOutlineColor = lua_lib.sfShape_getOutlineColor
lua_lib.Shape_getOutlineThickness = lua_lib.sfShape_getOutlineThickness
lua_lib.Shape_getPointCount = lua_lib.sfShape_getPointCount
lua_lib.Shape_getPoint = lua_lib.sfShape_getPoint
lua_lib.Shape_getLocalBounds = lua_lib.sfShape_getLocalBounds
lua_lib.Shape_getGlobalBounds = lua_lib.sfShape_getGlobalBounds
lua_lib.Shape_update = lua_lib.sfShape_update
lua_lib.Sprite_create = lua_lib.sfSprite_create
lua_lib.Sprite_copy = lua_lib.sfSprite_copy
lua_lib.Sprite_destroy = lua_lib.sfSprite_destroy
lua_lib.Sprite_setPosition = lua_lib.sfSprite_setPosition
lua_lib.Sprite_setRotation = lua_lib.sfSprite_setRotation
lua_lib.Sprite_setScale = lua_lib.sfSprite_setScale
lua_lib.Sprite_setOrigin = lua_lib.sfSprite_setOrigin
lua_lib.Sprite_getPosition = lua_lib.sfSprite_getPosition
lua_lib.Sprite_getRotation = lua_lib.sfSprite_getRotation
lua_lib.Sprite_getScale = lua_lib.sfSprite_getScale
lua_lib.Sprite_getOrigin = lua_lib.sfSprite_getOrigin
lua_lib.Sprite_move = lua_lib.sfSprite_move
lua_lib.Sprite_rotate = lua_lib.sfSprite_rotate
lua_lib.Sprite_scale = lua_lib.sfSprite_scale
lua_lib.Sprite_getTransform = lua_lib.sfSprite_getTransform
lua_lib.Sprite_getInverseTransform = lua_lib.sfSprite_getInverseTransform
lua_lib.Sprite_setTexture = lua_lib.sfSprite_setTexture
lua_lib.Sprite_setTextureRect = lua_lib.sfSprite_setTextureRect
lua_lib.Sprite_setColor = lua_lib.sfSprite_setColor
lua_lib.Sprite_getTexture = lua_lib.sfSprite_getTexture
lua_lib.Sprite_getTextureRect = lua_lib.sfSprite_getTextureRect
lua_lib.Sprite_getColor = lua_lib.sfSprite_getColor
lua_lib.Sprite_getLocalBounds = lua_lib.sfSprite_getLocalBounds
lua_lib.Sprite_getGlobalBounds = lua_lib.sfSprite_getGlobalBounds
lua_lib.Text_create = lua_lib.sfText_create
lua_lib.Text_copy = lua_lib.sfText_copy
lua_lib.Text_destroy = lua_lib.sfText_destroy
lua_lib.Text_setPosition = lua_lib.sfText_setPosition
lua_lib.Text_setRotation = lua_lib.sfText_setRotation
lua_lib.Text_setScale = lua_lib.sfText_setScale
lua_lib.Text_setOrigin = lua_lib.sfText_setOrigin
lua_lib.Text_getPosition = lua_lib.sfText_getPosition
lua_lib.Text_getRotation = lua_lib.sfText_getRotation
lua_lib.Text_getScale = lua_lib.sfText_getScale
lua_lib.Text_getOrigin = lua_lib.sfText_getOrigin
lua_lib.Text_move = lua_lib.sfText_move
lua_lib.Text_rotate = lua_lib.sfText_rotate
lua_lib.Text_scale = lua_lib.sfText_scale
lua_lib.Text_getTransform = lua_lib.sfText_getTransform
lua_lib.Text_getInverseTransform = lua_lib.sfText_getInverseTransform
lua_lib.Text_setString = lua_lib.sfText_setString
lua_lib.Text_setUnicodeString = lua_lib.sfText_setUnicodeString
lua_lib.Text_setFont = lua_lib.sfText_setFont
lua_lib.Text_setCharacterSize = lua_lib.sfText_setCharacterSize
lua_lib.Text_setLineSpacing = lua_lib.sfText_setLineSpacing
lua_lib.Text_setLetterSpacing = lua_lib.sfText_setLetterSpacing
lua_lib.Text_setStyle = lua_lib.sfText_setStyle
lua_lib.Text_setColor = lua_lib.sfText_setColor
lua_lib.Text_setFillColor = lua_lib.sfText_setFillColor
lua_lib.Text_setOutlineColor = lua_lib.sfText_setOutlineColor
lua_lib.Text_setOutlineThickness = lua_lib.sfText_setOutlineThickness
lua_lib.Text_getString = lua_lib.sfText_getString
lua_lib.Text_getUnicodeString = lua_lib.sfText_getUnicodeString
lua_lib.Text_getFont = lua_lib.sfText_getFont
lua_lib.Text_getCharacterSize = lua_lib.sfText_getCharacterSize
lua_lib.Text_getLetterSpacing = lua_lib.sfText_getLetterSpacing
lua_lib.Text_getLineSpacing = lua_lib.sfText_getLineSpacing
lua_lib.Text_getStyle = lua_lib.sfText_getStyle
lua_lib.Text_getColor = lua_lib.sfText_getColor
lua_lib.Text_getFillColor = lua_lib.sfText_getFillColor
lua_lib.Text_getOutlineColor = lua_lib.sfText_getOutlineColor
lua_lib.Text_getOutlineThickness = lua_lib.sfText_getOutlineThickness
lua_lib.Text_findCharacterPos = lua_lib.sfText_findCharacterPos
lua_lib.Text_getLocalBounds = lua_lib.sfText_getLocalBounds
lua_lib.Text_getGlobalBounds = lua_lib.sfText_getGlobalBounds
lua_lib.Texture_create = lua_lib.sfTexture_create
lua_lib.Texture_createFromFile = lua_lib.sfTexture_createFromFile
lua_lib.Texture_createFromMemory = lua_lib.sfTexture_createFromMemory
lua_lib.Texture_createFromStream = lua_lib.sfTexture_createFromStream
lua_lib.Texture_createFromImage = lua_lib.sfTexture_createFromImage
lua_lib.Texture_copy = lua_lib.sfTexture_copy
lua_lib.Texture_destroy = lua_lib.sfTexture_destroy
lua_lib.Texture_getSize = lua_lib.sfTexture_getSize
lua_lib.Texture_copyToImage = lua_lib.sfTexture_copyToImage
lua_lib.Texture_updateFromPixels = lua_lib.sfTexture_updateFromPixels
lua_lib.Texture_updateFromTexture = lua_lib.sfTexture_updateFromTexture
lua_lib.Texture_updateFromImage = lua_lib.sfTexture_updateFromImage
lua_lib.Texture_updateFromWindow = lua_lib.sfTexture_updateFromWindow
lua_lib.Texture_updateFromRenderWindow = lua_lib.sfTexture_updateFromRenderWindow
lua_lib.Texture_setSmooth = lua_lib.sfTexture_setSmooth
lua_lib.Texture_isSmooth = lua_lib.sfTexture_isSmooth
lua_lib.Texture_setSrgb = lua_lib.sfTexture_setSrgb
lua_lib.Texture_isSrgb = lua_lib.sfTexture_isSrgb
lua_lib.Texture_setRepeated = lua_lib.sfTexture_setRepeated
lua_lib.Texture_isRepeated = lua_lib.sfTexture_isRepeated
lua_lib.Texture_generateMipmap = lua_lib.sfTexture_generateMipmap
lua_lib.Texture_swap = lua_lib.sfTexture_swap
lua_lib.Texture_getNativeHandle = lua_lib.sfTexture_getNativeHandle
lua_lib.Texture_bind = lua_lib.sfTexture_bind
lua_lib.Texture_getMaximumSize = lua_lib.sfTexture_getMaximumSize
lua_lib.Transformable_create = lua_lib.sfTransformable_create
lua_lib.Transformable_copy = lua_lib.sfTransformable_copy
lua_lib.Transformable_destroy = lua_lib.sfTransformable_destroy
lua_lib.Transformable_setPosition = lua_lib.sfTransformable_setPosition
lua_lib.Transformable_setRotation = lua_lib.sfTransformable_setRotation
lua_lib.Transformable_setScale = lua_lib.sfTransformable_setScale
lua_lib.Transformable_setOrigin = lua_lib.sfTransformable_setOrigin
lua_lib.Transformable_getPosition = lua_lib.sfTransformable_getPosition
lua_lib.Transformable_getRotation = lua_lib.sfTransformable_getRotation
lua_lib.Transformable_getScale = lua_lib.sfTransformable_getScale
lua_lib.Transformable_getOrigin = lua_lib.sfTransformable_getOrigin
lua_lib.Transformable_move = lua_lib.sfTransformable_move
lua_lib.Transformable_rotate = lua_lib.sfTransformable_rotate
lua_lib.Transformable_scale = lua_lib.sfTransformable_scale
lua_lib.Transformable_getTransform = lua_lib.sfTransformable_getTransform
lua_lib.Transformable_getInverseTransform = lua_lib.sfTransformable_getInverseTransform
lua_lib.VertexArray_create = lua_lib.sfVertexArray_create
lua_lib.VertexArray_copy = lua_lib.sfVertexArray_copy
lua_lib.VertexArray_destroy = lua_lib.sfVertexArray_destroy
lua_lib.VertexArray_getVertexCount = lua_lib.sfVertexArray_getVertexCount
lua_lib.VertexArray_getVertex = lua_lib.sfVertexArray_getVertex
lua_lib.VertexArray_clear = lua_lib.sfVertexArray_clear
lua_lib.VertexArray_resize = lua_lib.sfVertexArray_resize
lua_lib.VertexArray_append = lua_lib.sfVertexArray_append
lua_lib.VertexArray_setPrimitiveType = lua_lib.sfVertexArray_setPrimitiveType
lua_lib.VertexArray_getPrimitiveType = lua_lib.sfVertexArray_getPrimitiveType
lua_lib.VertexArray_getBounds = lua_lib.sfVertexArray_getBounds
lua_lib.VertexBuffer_create = lua_lib.sfVertexBuffer_create
lua_lib.VertexBuffer_copy = lua_lib.sfVertexBuffer_copy
lua_lib.VertexBuffer_destroy = lua_lib.sfVertexBuffer_destroy
lua_lib.VertexBuffer_getVertexCount = lua_lib.sfVertexBuffer_getVertexCount
lua_lib.VertexBuffer_update = lua_lib.sfVertexBuffer_update
lua_lib.VertexBuffer_updateFromVertexBuffer = lua_lib.sfVertexBuffer_updateFromVertexBuffer
lua_lib.VertexBuffer_swap = lua_lib.sfVertexBuffer_swap
lua_lib.VertexBuffer_getNativeHandle = lua_lib.sfVertexBuffer_getNativeHandle
lua_lib.VertexBuffer_setPrimitiveType = lua_lib.sfVertexBuffer_setPrimitiveType
lua_lib.VertexBuffer_getPrimitiveType = lua_lib.sfVertexBuffer_getPrimitiveType
lua_lib.VertexBuffer_setUsage = lua_lib.sfVertexBuffer_setUsage
lua_lib.VertexBuffer_getUsage = lua_lib.sfVertexBuffer_getUsage
lua_lib.VertexBuffer_bind = lua_lib.sfVertexBuffer_bind
lua_lib.VertexBuffer_isAvailable = lua_lib.sfVertexBuffer_isAvailable
lua_lib.View_create = lua_lib.sfView_create
lua_lib.View_createFromRect = lua_lib.sfView_createFromRect
lua_lib.View_copy = lua_lib.sfView_copy
lua_lib.View_destroy = lua_lib.sfView_destroy
lua_lib.View_setCenter = lua_lib.sfView_setCenter
lua_lib.View_setSize = lua_lib.sfView_setSize
lua_lib.View_setRotation = lua_lib.sfView_setRotation
lua_lib.View_setViewport = lua_lib.sfView_setViewport
lua_lib.View_reset = lua_lib.sfView_reset
lua_lib.View_getCenter = lua_lib.sfView_getCenter
lua_lib.View_getSize = lua_lib.sfView_getSize
lua_lib.View_getRotation = lua_lib.sfView_getRotation
lua_lib.View_getViewport = lua_lib.sfView_getViewport
lua_lib.View_move = lua_lib.sfView_move
lua_lib.View_rotate = lua_lib.sfView_rotate
lua_lib.View_zoom = lua_lib.sfView_zoom
return lua_lib

