--[[
-- This file was automatically generated by Inclua 0.2.0 (https://github.com/gilzoide/inclua)
-- 
-- The Inclua team hopes this file was accurately generated, that it will be useful
-- and will never give SEGFAULTs, throw exceptions, or panic in a similar way.
-- This software is provided 'as-is', without any warranty.
-- Feel free to change and redistribute it.
--]]
local ffi = require 'ffi'

ffi.cdef[=[
typedef int sfBool;
typedef signed   char sfInt8;
typedef unsigned char sfUint8;
typedef signed   short sfInt16;
typedef unsigned short sfUint16;
typedef signed   int sfInt32;
typedef unsigned int sfUint32;
typedef signed   long long sfInt64;
typedef unsigned long long sfUint64;
typedef struct  {
  sfInt64 microseconds;
} sfTime;

sfTime sfTime_Zero;
float sfTime_asSeconds(sfTime time);
sfInt32 sfTime_asMilliseconds(sfTime time);
sfInt64 sfTime_asMicroseconds(sfTime time);
sfTime sfSeconds(float amount);
sfTime sfMilliseconds(sfInt32 amount);
sfTime sfMicroseconds(sfInt64 amount);
typedef struct sfClock sfClock;

typedef struct sfMutex sfMutex;

typedef struct sfThread sfThread;

sfClock * sfClock_create();
sfClock * sfClock_copy(const sfClock * clock);
void sfClock_destroy(sfClock * clock);
sfTime sfClock_getElapsedTime(const sfClock * clock);
sfTime sfClock_restart(sfClock * clock);
typedef sfInt64 (*sfInputStreamReadFunc)(void* data, sfInt64 size, void* userData);
typedef sfInt64 (*sfInputStreamSeekFunc)(sfInt64 position, void* userData);
typedef sfInt64 (*sfInputStreamTellFunc)(void* userData);
typedef sfInt64 (*sfInputStreamGetSizeFunc)(void* userData);
typedef struct sfInputStream {
  sfInputStreamReadFunc read;
  sfInputStreamSeekFunc seek;
  sfInputStreamTellFunc tell;
  sfInputStreamGetSizeFunc getSize;
  void * userData;
} sfInputStream;

sfMutex * sfMutex_create();
void sfMutex_destroy(sfMutex * mutex);
void sfMutex_lock(sfMutex * mutex);
void sfMutex_unlock(sfMutex * mutex);
void sfSleep(sfTime duration);
sfThread * sfThread_create(void (*function)(void *), void * userData);
void sfThread_destroy(sfThread * thread);
void sfThread_launch(sfThread * thread);
void sfThread_wait(sfThread * thread);
void sfThread_terminate(sfThread * thread);
typedef struct  {
  int x;
  int y;
} sfVector2i;

typedef struct  {
  unsigned int x;
  unsigned int y;
} sfVector2u;

typedef struct  {
  float x;
  float y;
} sfVector2f;

typedef struct  {
  float x;
  float y;
  float z;
} sfVector3f;

]=]

local c_lib = ffi.load('csfml-system', true)
local lua_lib = setmetatable({ c_lib = c_lib }, { __index = c_lib })
lua_lib.Time = ffi.metatype('sfTime', {
  __name = 'sfTime',
  __index = {
    asSeconds = c_lib.sfTime_asSeconds,
    asMilliseconds = c_lib.sfTime_asMilliseconds,
    asMicroseconds = c_lib.sfTime_asMicroseconds,
  },
})
lua_lib.Clock = ffi.metatype('sfClock', {
  __name = 'sfClock',
  __gc = c_lib.sfClock_destroy,
  __index = {
    copy = c_lib.sfClock_copy,
    getElapsedTime = c_lib.sfClock_getElapsedTime,
    restart = c_lib.sfClock_restart,
  },
})
lua_lib.Mutex = ffi.metatype('sfMutex', {
  __name = 'sfMutex',
  __gc = c_lib.sfMutex_destroy,
  __index = {
    lock = c_lib.sfMutex_lock,
    unlock = c_lib.sfMutex_unlock,
  },
})
lua_lib.Thread = ffi.metatype('sfThread', {
  __name = 'sfThread',
  __gc = c_lib.sfThread_destroy,
  __index = {
    launch = c_lib.sfThread_launch,
    wait = c_lib.sfThread_wait,
    terminate = c_lib.sfThread_terminate,
  },
})
lua_lib.InputStream = ffi.metatype('sfInputStream', {
  __name = 'sfInputStream',
})
lua_lib.Vector2i = ffi.metatype('sfVector2i', {
  __name = 'sfVector2i',
})
lua_lib.Vector2u = ffi.metatype('sfVector2u', {
  __name = 'sfVector2u',
})
lua_lib.Vector2f = ffi.metatype('sfVector2f', {
  __name = 'sfVector2f',
})
lua_lib.Vector3f = ffi.metatype('sfVector3f', {
  __name = 'sfVector3f',
})
lua_lib.Time_Zero = lua_lib.sfTime_Zero
lua_lib.Time_asSeconds = lua_lib.sfTime_asSeconds
lua_lib.Time_asMilliseconds = lua_lib.sfTime_asMilliseconds
lua_lib.Time_asMicroseconds = lua_lib.sfTime_asMicroseconds
lua_lib.Seconds = lua_lib.sfSeconds
lua_lib.Milliseconds = lua_lib.sfMilliseconds
lua_lib.Microseconds = lua_lib.sfMicroseconds
lua_lib.Clock_create = lua_lib.sfClock_create
lua_lib.Clock_copy = lua_lib.sfClock_copy
lua_lib.Clock_destroy = lua_lib.sfClock_destroy
lua_lib.Clock_getElapsedTime = lua_lib.sfClock_getElapsedTime
lua_lib.Clock_restart = lua_lib.sfClock_restart
lua_lib.Mutex_create = lua_lib.sfMutex_create
lua_lib.Mutex_destroy = lua_lib.sfMutex_destroy
lua_lib.Mutex_lock = lua_lib.sfMutex_lock
lua_lib.Mutex_unlock = lua_lib.sfMutex_unlock
lua_lib.Sleep = lua_lib.sfSleep
lua_lib.Thread_create = lua_lib.sfThread_create
lua_lib.Thread_destroy = lua_lib.sfThread_destroy
lua_lib.Thread_launch = lua_lib.sfThread_launch
lua_lib.Thread_wait = lua_lib.sfThread_wait
lua_lib.Thread_terminate = lua_lib.sfThread_terminate
return lua_lib

