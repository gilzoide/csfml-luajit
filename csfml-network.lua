--[[
-- This file was automatically generated by Inclua 0.2.0 (https://github.com/gilzoide/inclua)
-- 
-- The Inclua team hopes this file was accurately generated, that it will be useful
-- and will never give SEGFAULTs, throw exceptions, or panic in a similar way.
-- This software is provided 'as-is', without any warranty.
-- Feel free to change and redistribute it.
--]]
local ffi = require 'ffi'

ffi.cdef[=[
typedef struct  {
  char address[16];
} sfIpAddress;

const sfIpAddress sfIpAddress_None;
const sfIpAddress sfIpAddress_Any;
const sfIpAddress sfIpAddress_LocalHost;
const sfIpAddress sfIpAddress_Broadcast;
sfIpAddress sfIpAddress_fromString(const char * address);
sfIpAddress sfIpAddress_fromBytes(sfUint8 byte0, sfUint8 byte1, sfUint8 byte2, sfUint8 byte3);
sfIpAddress sfIpAddress_fromInteger(sfUint32 address);
void sfIpAddress_toString(sfIpAddress address, char * string);
sfUint32 sfIpAddress_toInteger(sfIpAddress address);
sfIpAddress sfIpAddress_getLocalAddress();
sfIpAddress sfIpAddress_getPublicAddress(sfTime timeout);
typedef struct sfFtpDirectoryResponse sfFtpDirectoryResponse;

typedef struct sfFtpListingResponse sfFtpListingResponse;

typedef struct sfFtpResponse sfFtpResponse;

typedef struct sfFtp sfFtp;

typedef struct sfHttpRequest sfHttpRequest;

typedef struct sfHttpResponse sfHttpResponse;

typedef struct sfHttp sfHttp;

typedef struct sfPacket sfPacket;

typedef struct sfSocketSelector sfSocketSelector;

typedef struct sfTcpListener sfTcpListener;

typedef struct sfTcpSocket sfTcpSocket;

typedef struct sfUdpSocket sfUdpSocket;

typedef enum  {
  sfFtpBinary = 0,
  sfFtpAscii = 1,
  sfFtpEbcdic = 2,
} sfFtpTransferMode;

typedef enum  {
  sfFtpRestartMarkerReply = 110,
  sfFtpServiceReadySoon = 120,
  sfFtpDataConnectionAlreadyOpened = 125,
  sfFtpOpeningDataConnection = 150,
  sfFtpOk = 200,
  sfFtpPointlessCommand = 202,
  sfFtpSystemStatus = 211,
  sfFtpDirectoryStatus = 212,
  sfFtpFileStatus = 213,
  sfFtpHelpMessage = 214,
  sfFtpSystemType = 215,
  sfFtpServiceReady = 220,
  sfFtpClosingConnection = 221,
  sfFtpDataConnectionOpened = 225,
  sfFtpClosingDataConnection = 226,
  sfFtpEnteringPassiveMode = 227,
  sfFtpLoggedIn = 230,
  sfFtpFileActionOk = 250,
  sfFtpDirectoryOk = 257,
  sfFtpNeedPassword = 331,
  sfFtpNeedAccountToLogIn = 332,
  sfFtpNeedInformation = 350,
  sfFtpServiceUnavailable = 421,
  sfFtpDataConnectionUnavailable = 425,
  sfFtpTransferAborted = 426,
  sfFtpFileActionAborted = 450,
  sfFtpLocalError = 451,
  sfFtpInsufficientStorageSpace = 452,
  sfFtpCommandUnknown = 500,
  sfFtpParametersUnknown = 501,
  sfFtpCommandNotImplemented = 502,
  sfFtpBadCommandSequence = 503,
  sfFtpParameterNotImplemented = 504,
  sfFtpNotLoggedIn = 530,
  sfFtpNeedAccountToStore = 532,
  sfFtpFileUnavailable = 550,
  sfFtpPageTypeUnknown = 551,
  sfFtpNotEnoughMemory = 552,
  sfFtpFilenameNotAllowed = 553,
  sfFtpInvalidResponse = 1000,
  sfFtpConnectionFailed = 1001,
  sfFtpConnectionClosed = 1002,
  sfFtpInvalidFile = 1003,
} sfFtpStatus;

void sfFtpListingResponse_destroy(sfFtpListingResponse * ftpListingResponse);
sfBool sfFtpListingResponse_isOk(const sfFtpListingResponse * ftpListingResponse);
sfFtpStatus sfFtpListingResponse_getStatus(const sfFtpListingResponse * ftpListingResponse);
const char * sfFtpListingResponse_getMessage(const sfFtpListingResponse * ftpListingResponse);
int sfFtpListingResponse_getCount(const sfFtpListingResponse * ftpListingResponse);
const char * sfFtpListingResponse_getName(const sfFtpListingResponse * ftpListingResponse, int index);
void sfFtpDirectoryResponse_destroy(sfFtpDirectoryResponse * ftpDirectoryResponse);
sfBool sfFtpDirectoryResponse_isOk(const sfFtpDirectoryResponse * ftpDirectoryResponse);
sfFtpStatus sfFtpDirectoryResponse_getStatus(const sfFtpDirectoryResponse * ftpDirectoryResponse);
const char * sfFtpDirectoryResponse_getMessage(const sfFtpDirectoryResponse * ftpDirectoryResponse);
const char * sfFtpDirectoryResponse_getDirectory(const sfFtpDirectoryResponse * ftpDirectoryResponse);
void sfFtpResponse_destroy(sfFtpResponse * ftpResponse);
sfBool sfFtpResponse_isOk(const sfFtpResponse * ftpResponse);
sfFtpStatus sfFtpResponse_getStatus(const sfFtpResponse * ftpResponse);
const char * sfFtpResponse_getMessage(const sfFtpResponse * ftpResponse);
sfFtp * sfFtp_create();
void sfFtp_destroy(sfFtp * ftp);
sfFtpResponse * sfFtp_connect(sfFtp * ftp, sfIpAddress server, unsigned short port, sfTime timeout);
sfFtpResponse * sfFtp_loginAnonymous(sfFtp * ftp);
sfFtpResponse * sfFtp_login(sfFtp * ftp, const char * name, const char * password);
sfFtpResponse * sfFtp_disconnect(sfFtp * ftp);
sfFtpResponse * sfFtp_keepAlive(sfFtp * ftp);
sfFtpDirectoryResponse * sfFtp_getWorkingDirectory(sfFtp * ftp);
sfFtpListingResponse * sfFtp_getDirectoryListing(sfFtp * ftp, const char * directory);
sfFtpResponse * sfFtp_changeDirectory(sfFtp * ftp, const char * directory);
sfFtpResponse * sfFtp_parentDirectory(sfFtp * ftp);
sfFtpResponse * sfFtp_createDirectory(sfFtp * ftp, const char * name);
sfFtpResponse * sfFtp_deleteDirectory(sfFtp * ftp, const char * name);
sfFtpResponse * sfFtp_renameFile(sfFtp * ftp, const char * file, const char * newName);
sfFtpResponse * sfFtp_deleteFile(sfFtp * ftp, const char * name);
sfFtpResponse * sfFtp_download(sfFtp * ftp, const char * remoteFile, const char * localPath, sfFtpTransferMode mode);
sfFtpResponse * sfFtp_upload(sfFtp * ftp, const char * localFile, const char * remotePath, sfFtpTransferMode mode, sfBool append);
sfFtpResponse * sfFtp_sendCommand(sfFtp * ftp, const char * command, const char * parameter);
typedef enum  {
  sfHttpGet = 0,
  sfHttpPost = 1,
  sfHttpHead = 2,
  sfHttpPut = 3,
  sfHttpDelete = 4,
} sfHttpMethod;

typedef enum  {
  sfHttpOk = 200,
  sfHttpCreated = 201,
  sfHttpAccepted = 202,
  sfHttpNoContent = 204,
  sfHttpResetContent = 205,
  sfHttpPartialContent = 206,
  sfHttpMultipleChoices = 300,
  sfHttpMovedPermanently = 301,
  sfHttpMovedTemporarily = 302,
  sfHttpNotModified = 304,
  sfHttpBadRequest = 400,
  sfHttpUnauthorized = 401,
  sfHttpForbidden = 403,
  sfHttpNotFound = 404,
  sfHttpRangeNotSatisfiable = 407,
  sfHttpInternalServerError = 500,
  sfHttpNotImplemented = 501,
  sfHttpBadGateway = 502,
  sfHttpServiceNotAvailable = 503,
  sfHttpGatewayTimeout = 504,
  sfHttpVersionNotSupported = 505,
  sfHttpInvalidResponse = 1000,
  sfHttpConnectionFailed = 1001,
} sfHttpStatus;

sfHttpRequest * sfHttpRequest_create();
void sfHttpRequest_destroy(sfHttpRequest * httpRequest);
void sfHttpRequest_setField(sfHttpRequest * httpRequest, const char * field, const char * value);
void sfHttpRequest_setMethod(sfHttpRequest * httpRequest, sfHttpMethod method);
void sfHttpRequest_setUri(sfHttpRequest * httpRequest, const char * uri);
void sfHttpRequest_setHttpVersion(sfHttpRequest * httpRequest, unsigned int major, unsigned int minor);
void sfHttpRequest_setBody(sfHttpRequest * httpRequest, const char * body);
void sfHttpResponse_destroy(sfHttpResponse * httpResponse);
const char * sfHttpResponse_getField(const sfHttpResponse * httpResponse, const char * field);
sfHttpStatus sfHttpResponse_getStatus(const sfHttpResponse * httpResponse);
unsigned int sfHttpResponse_getMajorVersion(const sfHttpResponse * httpResponse);
unsigned int sfHttpResponse_getMinorVersion(const sfHttpResponse * httpResponse);
const char * sfHttpResponse_getBody(const sfHttpResponse * httpResponse);
sfHttp * sfHttp_create();
void sfHttp_destroy(sfHttp * http);
void sfHttp_setHost(sfHttp * http, const char * host, unsigned short port);
sfHttpResponse * sfHttp_sendRequest(sfHttp * http, const sfHttpRequest * request, sfTime timeout);
sfPacket * sfPacket_create();
sfPacket * sfPacket_copy(const sfPacket * packet);
void sfPacket_destroy(sfPacket * packet);
void sfPacket_append(sfPacket * packet, const void * data, int sizeInBytes);
void sfPacket_clear(sfPacket * packet);
const void * sfPacket_getData(const sfPacket * packet);
int sfPacket_getDataSize(const sfPacket * packet);
sfBool sfPacket_endOfPacket(const sfPacket * packet);
sfBool sfPacket_canRead(const sfPacket * packet);
sfBool sfPacket_readBool(sfPacket * packet);
sfInt8 sfPacket_readInt8(sfPacket * packet);
sfUint8 sfPacket_readUint8(sfPacket * packet);
sfInt16 sfPacket_readInt16(sfPacket * packet);
sfUint16 sfPacket_readUint16(sfPacket * packet);
sfInt32 sfPacket_readInt32(sfPacket * packet);
sfUint32 sfPacket_readUint32(sfPacket * packet);
float sfPacket_readFloat(sfPacket * packet);
double sfPacket_readDouble(sfPacket * packet);
void sfPacket_readString(sfPacket * packet, char * string);
void sfPacket_readWideString(sfPacket * packet, int * string);
void sfPacket_writeBool(sfPacket * packet, sfBool );
void sfPacket_writeInt8(sfPacket * packet, sfInt8 );
void sfPacket_writeUint8(sfPacket * packet, sfUint8 );
void sfPacket_writeInt16(sfPacket * packet, sfInt16 );
void sfPacket_writeUint16(sfPacket * packet, sfUint16 );
void sfPacket_writeInt32(sfPacket * packet, sfInt32 );
void sfPacket_writeUint32(sfPacket * packet, sfUint32 );
void sfPacket_writeFloat(sfPacket * packet, float );
void sfPacket_writeDouble(sfPacket * packet, double );
void sfPacket_writeString(sfPacket * packet, const char * string);
void sfPacket_writeWideString(sfPacket * packet, const int * string);
sfSocketSelector * sfSocketSelector_create();
sfSocketSelector * sfSocketSelector_copy(const sfSocketSelector * selector);
void sfSocketSelector_destroy(sfSocketSelector * selector);
void sfSocketSelector_addTcpListener(sfSocketSelector * selector, sfTcpListener * socket);
void sfSocketSelector_addTcpSocket(sfSocketSelector * selector, sfTcpSocket * socket);
void sfSocketSelector_addUdpSocket(sfSocketSelector * selector, sfUdpSocket * socket);
void sfSocketSelector_removeTcpListener(sfSocketSelector * selector, sfTcpListener * socket);
void sfSocketSelector_removeTcpSocket(sfSocketSelector * selector, sfTcpSocket * socket);
void sfSocketSelector_removeUdpSocket(sfSocketSelector * selector, sfUdpSocket * socket);
void sfSocketSelector_clear(sfSocketSelector * selector);
sfBool sfSocketSelector_wait(sfSocketSelector * selector, sfTime timeout);
sfBool sfSocketSelector_isTcpListenerReady(const sfSocketSelector * selector, sfTcpListener * socket);
sfBool sfSocketSelector_isTcpSocketReady(const sfSocketSelector * selector, sfTcpSocket * socket);
sfBool sfSocketSelector_isUdpSocketReady(const sfSocketSelector * selector, sfUdpSocket * socket);
typedef enum  {
  sfSocketDone = 0,
  sfSocketNotReady = 1,
  sfSocketPartial = 2,
  sfSocketDisconnected = 3,
  sfSocketError = 4,
} sfSocketStatus;

sfTcpListener * sfTcpListener_create();
void sfTcpListener_destroy(sfTcpListener * listener);
void sfTcpListener_setBlocking(sfTcpListener * listener, sfBool blocking);
sfBool sfTcpListener_isBlocking(const sfTcpListener * listener);
unsigned short sfTcpListener_getLocalPort(const sfTcpListener * listener);
sfSocketStatus sfTcpListener_listen(sfTcpListener * listener, unsigned short port, sfIpAddress address);
sfSocketStatus sfTcpListener_accept(sfTcpListener * listener, sfTcpSocket ** connected);
sfTcpSocket * sfTcpSocket_create();
void sfTcpSocket_destroy(sfTcpSocket * socket);
void sfTcpSocket_setBlocking(sfTcpSocket * socket, sfBool blocking);
sfBool sfTcpSocket_isBlocking(const sfTcpSocket * socket);
unsigned short sfTcpSocket_getLocalPort(const sfTcpSocket * socket);
sfIpAddress sfTcpSocket_getRemoteAddress(const sfTcpSocket * socket);
unsigned short sfTcpSocket_getRemotePort(const sfTcpSocket * socket);
sfSocketStatus sfTcpSocket_connect(sfTcpSocket * socket, sfIpAddress remoteAddress, unsigned short remotePort, sfTime timeout);
void sfTcpSocket_disconnect(sfTcpSocket * socket);
sfSocketStatus sfTcpSocket_send(sfTcpSocket * socket, const void * data, int size);
sfSocketStatus sfTcpSocket_sendPartial(sfTcpSocket * socket, const void * data, int size, int * sent);
sfSocketStatus sfTcpSocket_receive(sfTcpSocket * socket, void * data, int size, int * received);
sfSocketStatus sfTcpSocket_sendPacket(sfTcpSocket * socket, sfPacket * packet);
sfSocketStatus sfTcpSocket_receivePacket(sfTcpSocket * socket, sfPacket * packet);
sfUdpSocket * sfUdpSocket_create();
void sfUdpSocket_destroy(sfUdpSocket * socket);
void sfUdpSocket_setBlocking(sfUdpSocket * socket, sfBool blocking);
sfBool sfUdpSocket_isBlocking(const sfUdpSocket * socket);
unsigned short sfUdpSocket_getLocalPort(const sfUdpSocket * socket);
sfSocketStatus sfUdpSocket_bind(sfUdpSocket * socket, unsigned short port, sfIpAddress address);
void sfUdpSocket_unbind(sfUdpSocket * socket);
sfSocketStatus sfUdpSocket_send(sfUdpSocket * socket, const void * data, int size, sfIpAddress remoteAddress, unsigned short remotePort);
sfSocketStatus sfUdpSocket_receive(sfUdpSocket * socket, void * data, int size, int * received, sfIpAddress * remoteAddress, unsigned short * remotePort);
sfSocketStatus sfUdpSocket_sendPacket(sfUdpSocket * socket, sfPacket * packet, sfIpAddress remoteAddress, unsigned short remotePort);
sfSocketStatus sfUdpSocket_receivePacket(sfUdpSocket * socket, sfPacket * packet, sfIpAddress * remoteAddress, unsigned short * remotePort);
unsigned int sfUdpSocket_maxDatagramSize();
]=]

local c_lib = ffi.load('csfml-network', true)
local lua_lib = setmetatable({ c_lib = c_lib }, { __index = c_lib })
lua_lib.IpAddress = ffi.metatype('sfIpAddress', {
  __name = 'sfIpAddress',
  __index = {
    toString = c_lib.sfIpAddress_toString,
    toInteger = c_lib.sfIpAddress_toInteger,
  },
})
lua_lib.FtpDirectoryResponse = ffi.metatype('sfFtpDirectoryResponse', {
  __name = 'sfFtpDirectoryResponse',
  __gc = c_lib.sfFtpDirectoryResponse_destroy,
  __index = {
    isOk = c_lib.sfFtpDirectoryResponse_isOk,
    getStatus = c_lib.sfFtpDirectoryResponse_getStatus,
    getMessage = c_lib.sfFtpDirectoryResponse_getMessage,
    getDirectory = c_lib.sfFtpDirectoryResponse_getDirectory,
  },
})
lua_lib.FtpListingResponse = ffi.metatype('sfFtpListingResponse', {
  __name = 'sfFtpListingResponse',
  __gc = c_lib.sfFtpListingResponse_destroy,
  __index = {
    isOk = c_lib.sfFtpListingResponse_isOk,
    getStatus = c_lib.sfFtpListingResponse_getStatus,
    getMessage = c_lib.sfFtpListingResponse_getMessage,
    getCount = c_lib.sfFtpListingResponse_getCount,
    getName = c_lib.sfFtpListingResponse_getName,
  },
})
lua_lib.FtpResponse = ffi.metatype('sfFtpResponse', {
  __name = 'sfFtpResponse',
  __gc = c_lib.sfFtpResponse_destroy,
  __index = {
    isOk = c_lib.sfFtpResponse_isOk,
    getStatus = c_lib.sfFtpResponse_getStatus,
    getMessage = c_lib.sfFtpResponse_getMessage,
  },
})
lua_lib.Ftp = ffi.metatype('sfFtp', {
  __name = 'sfFtp',
  __gc = c_lib.sfFtp_destroy,
  __index = {
    connect = c_lib.sfFtp_connect,
    loginAnonymous = c_lib.sfFtp_loginAnonymous,
    login = c_lib.sfFtp_login,
    disconnect = c_lib.sfFtp_disconnect,
    keepAlive = c_lib.sfFtp_keepAlive,
    getWorkingDirectory = c_lib.sfFtp_getWorkingDirectory,
    getDirectoryListing = c_lib.sfFtp_getDirectoryListing,
    changeDirectory = c_lib.sfFtp_changeDirectory,
    parentDirectory = c_lib.sfFtp_parentDirectory,
    createDirectory = c_lib.sfFtp_createDirectory,
    deleteDirectory = c_lib.sfFtp_deleteDirectory,
    renameFile = c_lib.sfFtp_renameFile,
    deleteFile = c_lib.sfFtp_deleteFile,
    download = c_lib.sfFtp_download,
    upload = c_lib.sfFtp_upload,
    sendCommand = c_lib.sfFtp_sendCommand,
  },
})
lua_lib.HttpRequest = ffi.metatype('sfHttpRequest', {
  __name = 'sfHttpRequest',
  __gc = c_lib.sfHttpRequest_destroy,
  __index = {
    setField = c_lib.sfHttpRequest_setField,
    setMethod = c_lib.sfHttpRequest_setMethod,
    setUri = c_lib.sfHttpRequest_setUri,
    setHttpVersion = c_lib.sfHttpRequest_setHttpVersion,
    setBody = c_lib.sfHttpRequest_setBody,
  },
})
lua_lib.HttpResponse = ffi.metatype('sfHttpResponse', {
  __name = 'sfHttpResponse',
  __gc = c_lib.sfHttpResponse_destroy,
  __index = {
    getField = c_lib.sfHttpResponse_getField,
    getStatus = c_lib.sfHttpResponse_getStatus,
    getMajorVersion = c_lib.sfHttpResponse_getMajorVersion,
    getMinorVersion = c_lib.sfHttpResponse_getMinorVersion,
    getBody = c_lib.sfHttpResponse_getBody,
  },
})
lua_lib.Http = ffi.metatype('sfHttp', {
  __name = 'sfHttp',
  __gc = c_lib.sfHttp_destroy,
  __index = {
    setHost = c_lib.sfHttp_setHost,
    sendRequest = c_lib.sfHttp_sendRequest,
  },
})
lua_lib.Packet = ffi.metatype('sfPacket', {
  __name = 'sfPacket',
  __gc = c_lib.sfPacket_destroy,
  __index = {
    copy = c_lib.sfPacket_copy,
    append = c_lib.sfPacket_append,
    clear = c_lib.sfPacket_clear,
    getData = c_lib.sfPacket_getData,
    getDataSize = c_lib.sfPacket_getDataSize,
    endOfPacket = c_lib.sfPacket_endOfPacket,
    canRead = c_lib.sfPacket_canRead,
    readBool = c_lib.sfPacket_readBool,
    readInt8 = c_lib.sfPacket_readInt8,
    readUint8 = c_lib.sfPacket_readUint8,
    readInt16 = c_lib.sfPacket_readInt16,
    readUint16 = c_lib.sfPacket_readUint16,
    readInt32 = c_lib.sfPacket_readInt32,
    readUint32 = c_lib.sfPacket_readUint32,
    readFloat = c_lib.sfPacket_readFloat,
    readDouble = c_lib.sfPacket_readDouble,
    readString = c_lib.sfPacket_readString,
    readWideString = c_lib.sfPacket_readWideString,
    writeBool = c_lib.sfPacket_writeBool,
    writeInt8 = c_lib.sfPacket_writeInt8,
    writeUint8 = c_lib.sfPacket_writeUint8,
    writeInt16 = c_lib.sfPacket_writeInt16,
    writeUint16 = c_lib.sfPacket_writeUint16,
    writeInt32 = c_lib.sfPacket_writeInt32,
    writeUint32 = c_lib.sfPacket_writeUint32,
    writeFloat = c_lib.sfPacket_writeFloat,
    writeDouble = c_lib.sfPacket_writeDouble,
    writeString = c_lib.sfPacket_writeString,
    writeWideString = c_lib.sfPacket_writeWideString,
  },
})
lua_lib.SocketSelector = ffi.metatype('sfSocketSelector', {
  __name = 'sfSocketSelector',
  __gc = c_lib.sfSocketSelector_destroy,
  __index = {
    copy = c_lib.sfSocketSelector_copy,
    addTcpListener = c_lib.sfSocketSelector_addTcpListener,
    addTcpSocket = c_lib.sfSocketSelector_addTcpSocket,
    addUdpSocket = c_lib.sfSocketSelector_addUdpSocket,
    removeTcpListener = c_lib.sfSocketSelector_removeTcpListener,
    removeTcpSocket = c_lib.sfSocketSelector_removeTcpSocket,
    removeUdpSocket = c_lib.sfSocketSelector_removeUdpSocket,
    clear = c_lib.sfSocketSelector_clear,
    wait = c_lib.sfSocketSelector_wait,
    isTcpListenerReady = c_lib.sfSocketSelector_isTcpListenerReady,
    isTcpSocketReady = c_lib.sfSocketSelector_isTcpSocketReady,
    isUdpSocketReady = c_lib.sfSocketSelector_isUdpSocketReady,
  },
})
lua_lib.TcpListener = ffi.metatype('sfTcpListener', {
  __name = 'sfTcpListener',
  __gc = c_lib.sfTcpListener_destroy,
  __index = {
    setBlocking = c_lib.sfTcpListener_setBlocking,
    isBlocking = c_lib.sfTcpListener_isBlocking,
    getLocalPort = c_lib.sfTcpListener_getLocalPort,
    listen = c_lib.sfTcpListener_listen,
    accept = c_lib.sfTcpListener_accept,
  },
})
lua_lib.TcpSocket = ffi.metatype('sfTcpSocket', {
  __name = 'sfTcpSocket',
  __gc = c_lib.sfTcpSocket_destroy,
  __index = {
    setBlocking = c_lib.sfTcpSocket_setBlocking,
    isBlocking = c_lib.sfTcpSocket_isBlocking,
    getLocalPort = c_lib.sfTcpSocket_getLocalPort,
    getRemoteAddress = c_lib.sfTcpSocket_getRemoteAddress,
    getRemotePort = c_lib.sfTcpSocket_getRemotePort,
    connect = c_lib.sfTcpSocket_connect,
    disconnect = c_lib.sfTcpSocket_disconnect,
    send = c_lib.sfTcpSocket_send,
    sendPartial = c_lib.sfTcpSocket_sendPartial,
    receive = c_lib.sfTcpSocket_receive,
    sendPacket = c_lib.sfTcpSocket_sendPacket,
    receivePacket = c_lib.sfTcpSocket_receivePacket,
  },
})
lua_lib.UdpSocket = ffi.metatype('sfUdpSocket', {
  __name = 'sfUdpSocket',
  __gc = c_lib.sfUdpSocket_destroy,
  __index = {
    setBlocking = c_lib.sfUdpSocket_setBlocking,
    isBlocking = c_lib.sfUdpSocket_isBlocking,
    getLocalPort = c_lib.sfUdpSocket_getLocalPort,
    bind = c_lib.sfUdpSocket_bind,
    unbind = c_lib.sfUdpSocket_unbind,
    send = c_lib.sfUdpSocket_send,
    receive = c_lib.sfUdpSocket_receive,
    sendPacket = c_lib.sfUdpSocket_sendPacket,
    receivePacket = c_lib.sfUdpSocket_receivePacket,
  },
})
lua_lib.IpAddress_None = lua_lib.sfIpAddress_None
lua_lib.IpAddress_Any = lua_lib.sfIpAddress_Any
lua_lib.IpAddress_LocalHost = lua_lib.sfIpAddress_LocalHost
lua_lib.IpAddress_Broadcast = lua_lib.sfIpAddress_Broadcast
lua_lib.IpAddress_fromString = lua_lib.sfIpAddress_fromString
lua_lib.IpAddress_fromBytes = lua_lib.sfIpAddress_fromBytes
lua_lib.IpAddress_fromInteger = lua_lib.sfIpAddress_fromInteger
lua_lib.IpAddress_toString = lua_lib.sfIpAddress_toString
lua_lib.IpAddress_toInteger = lua_lib.sfIpAddress_toInteger
lua_lib.IpAddress_getLocalAddress = lua_lib.sfIpAddress_getLocalAddress
lua_lib.IpAddress_getPublicAddress = lua_lib.sfIpAddress_getPublicAddress
lua_lib.FtpListingResponse_destroy = lua_lib.sfFtpListingResponse_destroy
lua_lib.FtpListingResponse_isOk = lua_lib.sfFtpListingResponse_isOk
lua_lib.FtpListingResponse_getStatus = lua_lib.sfFtpListingResponse_getStatus
lua_lib.FtpListingResponse_getMessage = lua_lib.sfFtpListingResponse_getMessage
lua_lib.FtpListingResponse_getCount = lua_lib.sfFtpListingResponse_getCount
lua_lib.FtpListingResponse_getName = lua_lib.sfFtpListingResponse_getName
lua_lib.FtpDirectoryResponse_destroy = lua_lib.sfFtpDirectoryResponse_destroy
lua_lib.FtpDirectoryResponse_isOk = lua_lib.sfFtpDirectoryResponse_isOk
lua_lib.FtpDirectoryResponse_getStatus = lua_lib.sfFtpDirectoryResponse_getStatus
lua_lib.FtpDirectoryResponse_getMessage = lua_lib.sfFtpDirectoryResponse_getMessage
lua_lib.FtpDirectoryResponse_getDirectory = lua_lib.sfFtpDirectoryResponse_getDirectory
lua_lib.FtpResponse_destroy = lua_lib.sfFtpResponse_destroy
lua_lib.FtpResponse_isOk = lua_lib.sfFtpResponse_isOk
lua_lib.FtpResponse_getStatus = lua_lib.sfFtpResponse_getStatus
lua_lib.FtpResponse_getMessage = lua_lib.sfFtpResponse_getMessage
lua_lib.Ftp_create = lua_lib.sfFtp_create
lua_lib.Ftp_destroy = lua_lib.sfFtp_destroy
lua_lib.Ftp_connect = lua_lib.sfFtp_connect
lua_lib.Ftp_loginAnonymous = lua_lib.sfFtp_loginAnonymous
lua_lib.Ftp_login = lua_lib.sfFtp_login
lua_lib.Ftp_disconnect = lua_lib.sfFtp_disconnect
lua_lib.Ftp_keepAlive = lua_lib.sfFtp_keepAlive
lua_lib.Ftp_getWorkingDirectory = lua_lib.sfFtp_getWorkingDirectory
lua_lib.Ftp_getDirectoryListing = lua_lib.sfFtp_getDirectoryListing
lua_lib.Ftp_changeDirectory = lua_lib.sfFtp_changeDirectory
lua_lib.Ftp_parentDirectory = lua_lib.sfFtp_parentDirectory
lua_lib.Ftp_createDirectory = lua_lib.sfFtp_createDirectory
lua_lib.Ftp_deleteDirectory = lua_lib.sfFtp_deleteDirectory
lua_lib.Ftp_renameFile = lua_lib.sfFtp_renameFile
lua_lib.Ftp_deleteFile = lua_lib.sfFtp_deleteFile
lua_lib.Ftp_download = lua_lib.sfFtp_download
lua_lib.Ftp_upload = lua_lib.sfFtp_upload
lua_lib.Ftp_sendCommand = lua_lib.sfFtp_sendCommand
lua_lib.HttpRequest_create = lua_lib.sfHttpRequest_create
lua_lib.HttpRequest_destroy = lua_lib.sfHttpRequest_destroy
lua_lib.HttpRequest_setField = lua_lib.sfHttpRequest_setField
lua_lib.HttpRequest_setMethod = lua_lib.sfHttpRequest_setMethod
lua_lib.HttpRequest_setUri = lua_lib.sfHttpRequest_setUri
lua_lib.HttpRequest_setHttpVersion = lua_lib.sfHttpRequest_setHttpVersion
lua_lib.HttpRequest_setBody = lua_lib.sfHttpRequest_setBody
lua_lib.HttpResponse_destroy = lua_lib.sfHttpResponse_destroy
lua_lib.HttpResponse_getField = lua_lib.sfHttpResponse_getField
lua_lib.HttpResponse_getStatus = lua_lib.sfHttpResponse_getStatus
lua_lib.HttpResponse_getMajorVersion = lua_lib.sfHttpResponse_getMajorVersion
lua_lib.HttpResponse_getMinorVersion = lua_lib.sfHttpResponse_getMinorVersion
lua_lib.HttpResponse_getBody = lua_lib.sfHttpResponse_getBody
lua_lib.Http_create = lua_lib.sfHttp_create
lua_lib.Http_destroy = lua_lib.sfHttp_destroy
lua_lib.Http_setHost = lua_lib.sfHttp_setHost
lua_lib.Http_sendRequest = lua_lib.sfHttp_sendRequest
lua_lib.Packet_create = lua_lib.sfPacket_create
lua_lib.Packet_copy = lua_lib.sfPacket_copy
lua_lib.Packet_destroy = lua_lib.sfPacket_destroy
lua_lib.Packet_append = lua_lib.sfPacket_append
lua_lib.Packet_clear = lua_lib.sfPacket_clear
lua_lib.Packet_getData = lua_lib.sfPacket_getData
lua_lib.Packet_getDataSize = lua_lib.sfPacket_getDataSize
lua_lib.Packet_endOfPacket = lua_lib.sfPacket_endOfPacket
lua_lib.Packet_canRead = lua_lib.sfPacket_canRead
lua_lib.Packet_readBool = lua_lib.sfPacket_readBool
lua_lib.Packet_readInt8 = lua_lib.sfPacket_readInt8
lua_lib.Packet_readUint8 = lua_lib.sfPacket_readUint8
lua_lib.Packet_readInt16 = lua_lib.sfPacket_readInt16
lua_lib.Packet_readUint16 = lua_lib.sfPacket_readUint16
lua_lib.Packet_readInt32 = lua_lib.sfPacket_readInt32
lua_lib.Packet_readUint32 = lua_lib.sfPacket_readUint32
lua_lib.Packet_readFloat = lua_lib.sfPacket_readFloat
lua_lib.Packet_readDouble = lua_lib.sfPacket_readDouble
lua_lib.Packet_readString = lua_lib.sfPacket_readString
lua_lib.Packet_readWideString = lua_lib.sfPacket_readWideString
lua_lib.Packet_writeBool = lua_lib.sfPacket_writeBool
lua_lib.Packet_writeInt8 = lua_lib.sfPacket_writeInt8
lua_lib.Packet_writeUint8 = lua_lib.sfPacket_writeUint8
lua_lib.Packet_writeInt16 = lua_lib.sfPacket_writeInt16
lua_lib.Packet_writeUint16 = lua_lib.sfPacket_writeUint16
lua_lib.Packet_writeInt32 = lua_lib.sfPacket_writeInt32
lua_lib.Packet_writeUint32 = lua_lib.sfPacket_writeUint32
lua_lib.Packet_writeFloat = lua_lib.sfPacket_writeFloat
lua_lib.Packet_writeDouble = lua_lib.sfPacket_writeDouble
lua_lib.Packet_writeString = lua_lib.sfPacket_writeString
lua_lib.Packet_writeWideString = lua_lib.sfPacket_writeWideString
lua_lib.SocketSelector_create = lua_lib.sfSocketSelector_create
lua_lib.SocketSelector_copy = lua_lib.sfSocketSelector_copy
lua_lib.SocketSelector_destroy = lua_lib.sfSocketSelector_destroy
lua_lib.SocketSelector_addTcpListener = lua_lib.sfSocketSelector_addTcpListener
lua_lib.SocketSelector_addTcpSocket = lua_lib.sfSocketSelector_addTcpSocket
lua_lib.SocketSelector_addUdpSocket = lua_lib.sfSocketSelector_addUdpSocket
lua_lib.SocketSelector_removeTcpListener = lua_lib.sfSocketSelector_removeTcpListener
lua_lib.SocketSelector_removeTcpSocket = lua_lib.sfSocketSelector_removeTcpSocket
lua_lib.SocketSelector_removeUdpSocket = lua_lib.sfSocketSelector_removeUdpSocket
lua_lib.SocketSelector_clear = lua_lib.sfSocketSelector_clear
lua_lib.SocketSelector_wait = lua_lib.sfSocketSelector_wait
lua_lib.SocketSelector_isTcpListenerReady = lua_lib.sfSocketSelector_isTcpListenerReady
lua_lib.SocketSelector_isTcpSocketReady = lua_lib.sfSocketSelector_isTcpSocketReady
lua_lib.SocketSelector_isUdpSocketReady = lua_lib.sfSocketSelector_isUdpSocketReady
lua_lib.TcpListener_create = lua_lib.sfTcpListener_create
lua_lib.TcpListener_destroy = lua_lib.sfTcpListener_destroy
lua_lib.TcpListener_setBlocking = lua_lib.sfTcpListener_setBlocking
lua_lib.TcpListener_isBlocking = lua_lib.sfTcpListener_isBlocking
lua_lib.TcpListener_getLocalPort = lua_lib.sfTcpListener_getLocalPort
lua_lib.TcpListener_listen = lua_lib.sfTcpListener_listen
lua_lib.TcpListener_accept = lua_lib.sfTcpListener_accept
lua_lib.TcpSocket_create = lua_lib.sfTcpSocket_create
lua_lib.TcpSocket_destroy = lua_lib.sfTcpSocket_destroy
lua_lib.TcpSocket_setBlocking = lua_lib.sfTcpSocket_setBlocking
lua_lib.TcpSocket_isBlocking = lua_lib.sfTcpSocket_isBlocking
lua_lib.TcpSocket_getLocalPort = lua_lib.sfTcpSocket_getLocalPort
lua_lib.TcpSocket_getRemoteAddress = lua_lib.sfTcpSocket_getRemoteAddress
lua_lib.TcpSocket_getRemotePort = lua_lib.sfTcpSocket_getRemotePort
lua_lib.TcpSocket_connect = lua_lib.sfTcpSocket_connect
lua_lib.TcpSocket_disconnect = lua_lib.sfTcpSocket_disconnect
lua_lib.TcpSocket_send = lua_lib.sfTcpSocket_send
lua_lib.TcpSocket_sendPartial = lua_lib.sfTcpSocket_sendPartial
lua_lib.TcpSocket_receive = lua_lib.sfTcpSocket_receive
lua_lib.TcpSocket_sendPacket = lua_lib.sfTcpSocket_sendPacket
lua_lib.TcpSocket_receivePacket = lua_lib.sfTcpSocket_receivePacket
lua_lib.UdpSocket_create = lua_lib.sfUdpSocket_create
lua_lib.UdpSocket_destroy = lua_lib.sfUdpSocket_destroy
lua_lib.UdpSocket_setBlocking = lua_lib.sfUdpSocket_setBlocking
lua_lib.UdpSocket_isBlocking = lua_lib.sfUdpSocket_isBlocking
lua_lib.UdpSocket_getLocalPort = lua_lib.sfUdpSocket_getLocalPort
lua_lib.UdpSocket_bind = lua_lib.sfUdpSocket_bind
lua_lib.UdpSocket_unbind = lua_lib.sfUdpSocket_unbind
lua_lib.UdpSocket_send = lua_lib.sfUdpSocket_send
lua_lib.UdpSocket_receive = lua_lib.sfUdpSocket_receive
lua_lib.UdpSocket_sendPacket = lua_lib.sfUdpSocket_sendPacket
lua_lib.UdpSocket_receivePacket = lua_lib.sfUdpSocket_receivePacket
lua_lib.UdpSocket_maxDatagramSize = lua_lib.sfUdpSocket_maxDatagramSize
return lua_lib

