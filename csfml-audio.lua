--[[
-- This file was automatically generated by Inclua 0.2.0 (https://github.com/gilzoide/inclua)
-- 
-- The Inclua team hopes this file was accurately generated, that it will be useful
-- and will never give SEGFAULTs, throw exceptions, or panic in a similar way.
-- This software is provided 'as-is', without any warranty.
-- Feel free to change and redistribute it.
--]]
local ffi = require 'ffi'

ffi.cdef[=[
void sfListener_setGlobalVolume(float volume);
float sfListener_getGlobalVolume();
void sfListener_setPosition(sfVector3f position);
sfVector3f sfListener_getPosition();
void sfListener_setDirection(sfVector3f direction);
sfVector3f sfListener_getDirection();
void sfListener_setUpVector(sfVector3f upVector);
sfVector3f sfListener_getUpVector();
typedef enum  {
  sfStopped = 0,
  sfPaused = 1,
  sfPlaying = 2,
} sfSoundStatus;

typedef struct sfMusic sfMusic;

typedef struct sfSound sfSound;

typedef struct sfSoundBuffer sfSoundBuffer;

typedef struct sfSoundBufferRecorder sfSoundBufferRecorder;

typedef struct sfSoundRecorder sfSoundRecorder;

typedef struct sfSoundStream sfSoundStream;

typedef struct  {
  sfTime offset;
  sfTime length;
} sfTimeSpan;

sfMusic * sfMusic_createFromFile(const char * filename);
sfMusic * sfMusic_createFromMemory(const void * data, int sizeInBytes);
sfMusic * sfMusic_createFromStream(sfInputStream * stream);
void sfMusic_destroy(sfMusic * music);
void sfMusic_setLoop(sfMusic * music, sfBool loop);
sfBool sfMusic_getLoop(const sfMusic * music);
sfTime sfMusic_getDuration(const sfMusic * music);
sfTimeSpan sfMusic_getLoopPoints(const sfMusic * music);
void sfMusic_setLoopPoints(sfMusic * music, sfTimeSpan timePoints);
void sfMusic_play(sfMusic * music);
void sfMusic_pause(sfMusic * music);
void sfMusic_stop(sfMusic * music);
unsigned int sfMusic_getChannelCount(const sfMusic * music);
unsigned int sfMusic_getSampleRate(const sfMusic * music);
sfSoundStatus sfMusic_getStatus(const sfMusic * music);
sfTime sfMusic_getPlayingOffset(const sfMusic * music);
void sfMusic_setPitch(sfMusic * music, float pitch);
void sfMusic_setVolume(sfMusic * music, float volume);
void sfMusic_setPosition(sfMusic * music, sfVector3f position);
void sfMusic_setRelativeToListener(sfMusic * music, sfBool relative);
void sfMusic_setMinDistance(sfMusic * music, float distance);
void sfMusic_setAttenuation(sfMusic * music, float attenuation);
void sfMusic_setPlayingOffset(sfMusic * music, sfTime timeOffset);
float sfMusic_getPitch(const sfMusic * music);
float sfMusic_getVolume(const sfMusic * music);
sfVector3f sfMusic_getPosition(const sfMusic * music);
sfBool sfMusic_isRelativeToListener(const sfMusic * music);
float sfMusic_getMinDistance(const sfMusic * music);
float sfMusic_getAttenuation(const sfMusic * music);
sfSound * sfSound_create();
sfSound * sfSound_copy(const sfSound * sound);
void sfSound_destroy(sfSound * sound);
void sfSound_play(sfSound * sound);
void sfSound_pause(sfSound * sound);
void sfSound_stop(sfSound * sound);
void sfSound_setBuffer(sfSound * sound, const sfSoundBuffer * buffer);
const sfSoundBuffer * sfSound_getBuffer(const sfSound * sound);
void sfSound_setLoop(sfSound * sound, sfBool loop);
sfBool sfSound_getLoop(const sfSound * sound);
sfSoundStatus sfSound_getStatus(const sfSound * sound);
void sfSound_setPitch(sfSound * sound, float pitch);
void sfSound_setVolume(sfSound * sound, float volume);
void sfSound_setPosition(sfSound * sound, sfVector3f position);
void sfSound_setRelativeToListener(sfSound * sound, sfBool relative);
void sfSound_setMinDistance(sfSound * sound, float distance);
void sfSound_setAttenuation(sfSound * sound, float attenuation);
void sfSound_setPlayingOffset(sfSound * sound, sfTime timeOffset);
float sfSound_getPitch(const sfSound * sound);
float sfSound_getVolume(const sfSound * sound);
sfVector3f sfSound_getPosition(const sfSound * sound);
sfBool sfSound_isRelativeToListener(const sfSound * sound);
float sfSound_getMinDistance(const sfSound * sound);
float sfSound_getAttenuation(const sfSound * sound);
sfTime sfSound_getPlayingOffset(const sfSound * sound);
sfSoundBuffer * sfSoundBuffer_createFromFile(const char * filename);
sfSoundBuffer * sfSoundBuffer_createFromMemory(const void * data, int sizeInBytes);
sfSoundBuffer * sfSoundBuffer_createFromStream(sfInputStream * stream);
sfSoundBuffer * sfSoundBuffer_createFromSamples(const sfInt16 * samples, sfUint64 sampleCount, unsigned int channelCount, unsigned int sampleRate);
sfSoundBuffer * sfSoundBuffer_copy(const sfSoundBuffer * soundBuffer);
void sfSoundBuffer_destroy(sfSoundBuffer * soundBuffer);
sfBool sfSoundBuffer_saveToFile(const sfSoundBuffer * soundBuffer, const char * filename);
const sfInt16 * sfSoundBuffer_getSamples(const sfSoundBuffer * soundBuffer);
sfUint64 sfSoundBuffer_getSampleCount(const sfSoundBuffer * soundBuffer);
unsigned int sfSoundBuffer_getSampleRate(const sfSoundBuffer * soundBuffer);
unsigned int sfSoundBuffer_getChannelCount(const sfSoundBuffer * soundBuffer);
sfTime sfSoundBuffer_getDuration(const sfSoundBuffer * soundBuffer);
sfSoundBufferRecorder * sfSoundBufferRecorder_create();
void sfSoundBufferRecorder_destroy(sfSoundBufferRecorder * soundBufferRecorder);
sfBool sfSoundBufferRecorder_start(sfSoundBufferRecorder * soundBufferRecorder, unsigned int sampleRate);
void sfSoundBufferRecorder_stop(sfSoundBufferRecorder * soundBufferRecorder);
unsigned int sfSoundBufferRecorder_getSampleRate(const sfSoundBufferRecorder * soundBufferRecorder);
const sfSoundBuffer * sfSoundBufferRecorder_getBuffer(const sfSoundBufferRecorder * soundBufferRecorder);
sfBool sfSoundBufferRecorder_setDevice(sfSoundBufferRecorder * soundBufferRecorder, const char * name);
const char * sfSoundBufferRecorder_getDevice(sfSoundBufferRecorder * soundBufferRecorder);
typedef sfBool (*sfSoundRecorderStartCallback)(void*);
typedef sfBool (*sfSoundRecorderProcessCallback)(const sfInt16*, size_t, void*);
typedef void   (*sfSoundRecorderStopCallback)(void*);
sfSoundRecorder * sfSoundRecorder_create(sfSoundRecorderStartCallback onStart, sfSoundRecorderProcessCallback onProcess, sfSoundRecorderStopCallback onStop, void * userData);
void sfSoundRecorder_destroy(sfSoundRecorder * soundRecorder);
sfBool sfSoundRecorder_start(sfSoundRecorder * soundRecorder, unsigned int sampleRate);
void sfSoundRecorder_stop(sfSoundRecorder * soundRecorder);
unsigned int sfSoundRecorder_getSampleRate(const sfSoundRecorder * soundRecorder);
sfBool sfSoundRecorder_isAvailable();
void sfSoundRecorder_setProcessingInterval(sfSoundRecorder * soundRecorder, sfTime interval);
const char ** sfSoundRecorder_getAvailableDevices(int * count);
const char * sfSoundRecorder_getDefaultDevice();
sfBool sfSoundRecorder_setDevice(sfSoundRecorder * soundRecorder, const char * name);
const char * sfSoundRecorder_getDevice(sfSoundRecorder * soundRecorder);
void sfSoundRecorder_setChannelCount(sfSoundRecorder * soundRecorder, unsigned int channelCount);
unsigned int sfSoundRecorder_getChannelCount(const sfSoundRecorder * soundRecorder);
typedef struct  {
  sfInt16 * samples;
  unsigned int sampleCount;
} sfSoundStreamChunk;

typedef sfBool (*sfSoundStreamGetDataCallback)(sfSoundStreamChunk*, void*);
typedef void   (*sfSoundStreamSeekCallback)(sfTime, void*);
sfSoundStream * sfSoundStream_create(sfSoundStreamGetDataCallback onGetData, sfSoundStreamSeekCallback onSeek, unsigned int channelCount, unsigned int sampleRate, void * userData);
void sfSoundStream_destroy(sfSoundStream * soundStream);
void sfSoundStream_play(sfSoundStream * soundStream);
void sfSoundStream_pause(sfSoundStream * soundStream);
void sfSoundStream_stop(sfSoundStream * soundStream);
sfSoundStatus sfSoundStream_getStatus(const sfSoundStream * soundStream);
unsigned int sfSoundStream_getChannelCount(const sfSoundStream * soundStream);
unsigned int sfSoundStream_getSampleRate(const sfSoundStream * soundStream);
void sfSoundStream_setPitch(sfSoundStream * soundStream, float pitch);
void sfSoundStream_setVolume(sfSoundStream * soundStream, float volume);
void sfSoundStream_setPosition(sfSoundStream * soundStream, sfVector3f position);
void sfSoundStream_setRelativeToListener(sfSoundStream * soundStream, sfBool relative);
void sfSoundStream_setMinDistance(sfSoundStream * soundStream, float distance);
void sfSoundStream_setAttenuation(sfSoundStream * soundStream, float attenuation);
void sfSoundStream_setPlayingOffset(sfSoundStream * soundStream, sfTime timeOffset);
void sfSoundStream_setLoop(sfSoundStream * soundStream, sfBool loop);
float sfSoundStream_getPitch(const sfSoundStream * soundStream);
float sfSoundStream_getVolume(const sfSoundStream * soundStream);
sfVector3f sfSoundStream_getPosition(const sfSoundStream * soundStream);
sfBool sfSoundStream_isRelativeToListener(const sfSoundStream * soundStream);
float sfSoundStream_getMinDistance(const sfSoundStream * soundStream);
float sfSoundStream_getAttenuation(const sfSoundStream * soundStream);
sfBool sfSoundStream_getLoop(const sfSoundStream * soundStream);
sfTime sfSoundStream_getPlayingOffset(const sfSoundStream * soundStream);
]=]

local c_lib = ffi.load('csfml-audio', true)
local lua_lib = setmetatable({ c_lib = c_lib }, { __index = c_lib })
lua_lib.Music = ffi.metatype('sfMusic', {
  __name = 'sfMusic',
  __gc = c_lib.sfMusic_destroy,
  __index = {
    setLoop = c_lib.sfMusic_setLoop,
    getLoop = c_lib.sfMusic_getLoop,
    getDuration = c_lib.sfMusic_getDuration,
    getLoopPoints = c_lib.sfMusic_getLoopPoints,
    setLoopPoints = c_lib.sfMusic_setLoopPoints,
    play = c_lib.sfMusic_play,
    pause = c_lib.sfMusic_pause,
    stop = c_lib.sfMusic_stop,
    getChannelCount = c_lib.sfMusic_getChannelCount,
    getSampleRate = c_lib.sfMusic_getSampleRate,
    getStatus = c_lib.sfMusic_getStatus,
    getPlayingOffset = c_lib.sfMusic_getPlayingOffset,
    setPitch = c_lib.sfMusic_setPitch,
    setVolume = c_lib.sfMusic_setVolume,
    setPosition = c_lib.sfMusic_setPosition,
    setRelativeToListener = c_lib.sfMusic_setRelativeToListener,
    setMinDistance = c_lib.sfMusic_setMinDistance,
    setAttenuation = c_lib.sfMusic_setAttenuation,
    setPlayingOffset = c_lib.sfMusic_setPlayingOffset,
    getPitch = c_lib.sfMusic_getPitch,
    getVolume = c_lib.sfMusic_getVolume,
    getPosition = c_lib.sfMusic_getPosition,
    isRelativeToListener = c_lib.sfMusic_isRelativeToListener,
    getMinDistance = c_lib.sfMusic_getMinDistance,
    getAttenuation = c_lib.sfMusic_getAttenuation,
  },
})
lua_lib.Sound = ffi.metatype('sfSound', {
  __name = 'sfSound',
  __gc = c_lib.sfSound_destroy,
  __index = {
    copy = c_lib.sfSound_copy,
    play = c_lib.sfSound_play,
    pause = c_lib.sfSound_pause,
    stop = c_lib.sfSound_stop,
    setBuffer = c_lib.sfSound_setBuffer,
    getBuffer = c_lib.sfSound_getBuffer,
    setLoop = c_lib.sfSound_setLoop,
    getLoop = c_lib.sfSound_getLoop,
    getStatus = c_lib.sfSound_getStatus,
    setPitch = c_lib.sfSound_setPitch,
    setVolume = c_lib.sfSound_setVolume,
    setPosition = c_lib.sfSound_setPosition,
    setRelativeToListener = c_lib.sfSound_setRelativeToListener,
    setMinDistance = c_lib.sfSound_setMinDistance,
    setAttenuation = c_lib.sfSound_setAttenuation,
    setPlayingOffset = c_lib.sfSound_setPlayingOffset,
    getPitch = c_lib.sfSound_getPitch,
    getVolume = c_lib.sfSound_getVolume,
    getPosition = c_lib.sfSound_getPosition,
    isRelativeToListener = c_lib.sfSound_isRelativeToListener,
    getMinDistance = c_lib.sfSound_getMinDistance,
    getAttenuation = c_lib.sfSound_getAttenuation,
    getPlayingOffset = c_lib.sfSound_getPlayingOffset,
  },
})
lua_lib.SoundBuffer = ffi.metatype('sfSoundBuffer', {
  __name = 'sfSoundBuffer',
  __gc = c_lib.sfSoundBuffer_destroy,
  __index = {
    copy = c_lib.sfSoundBuffer_copy,
    saveToFile = c_lib.sfSoundBuffer_saveToFile,
    getSamples = c_lib.sfSoundBuffer_getSamples,
    getSampleCount = c_lib.sfSoundBuffer_getSampleCount,
    getSampleRate = c_lib.sfSoundBuffer_getSampleRate,
    getChannelCount = c_lib.sfSoundBuffer_getChannelCount,
    getDuration = c_lib.sfSoundBuffer_getDuration,
  },
})
lua_lib.SoundBufferRecorder = ffi.metatype('sfSoundBufferRecorder', {
  __name = 'sfSoundBufferRecorder',
  __gc = c_lib.sfSoundBufferRecorder_destroy,
  __index = {
    start = c_lib.sfSoundBufferRecorder_start,
    stop = c_lib.sfSoundBufferRecorder_stop,
    getSampleRate = c_lib.sfSoundBufferRecorder_getSampleRate,
    getBuffer = c_lib.sfSoundBufferRecorder_getBuffer,
    setDevice = c_lib.sfSoundBufferRecorder_setDevice,
    getDevice = c_lib.sfSoundBufferRecorder_getDevice,
  },
})
lua_lib.SoundRecorder = ffi.metatype('sfSoundRecorder', {
  __name = 'sfSoundRecorder',
  __gc = c_lib.sfSoundRecorder_destroy,
  __index = {
    start = c_lib.sfSoundRecorder_start,
    stop = c_lib.sfSoundRecorder_stop,
    getSampleRate = c_lib.sfSoundRecorder_getSampleRate,
    setProcessingInterval = c_lib.sfSoundRecorder_setProcessingInterval,
    setDevice = c_lib.sfSoundRecorder_setDevice,
    getDevice = c_lib.sfSoundRecorder_getDevice,
    setChannelCount = c_lib.sfSoundRecorder_setChannelCount,
    getChannelCount = c_lib.sfSoundRecorder_getChannelCount,
  },
})
lua_lib.SoundStream = ffi.metatype('sfSoundStream', {
  __name = 'sfSoundStream',
  __gc = c_lib.sfSoundStream_destroy,
  __index = {
    play = c_lib.sfSoundStream_play,
    pause = c_lib.sfSoundStream_pause,
    stop = c_lib.sfSoundStream_stop,
    getStatus = c_lib.sfSoundStream_getStatus,
    getChannelCount = c_lib.sfSoundStream_getChannelCount,
    getSampleRate = c_lib.sfSoundStream_getSampleRate,
    setPitch = c_lib.sfSoundStream_setPitch,
    setVolume = c_lib.sfSoundStream_setVolume,
    setPosition = c_lib.sfSoundStream_setPosition,
    setRelativeToListener = c_lib.sfSoundStream_setRelativeToListener,
    setMinDistance = c_lib.sfSoundStream_setMinDistance,
    setAttenuation = c_lib.sfSoundStream_setAttenuation,
    setPlayingOffset = c_lib.sfSoundStream_setPlayingOffset,
    setLoop = c_lib.sfSoundStream_setLoop,
    getPitch = c_lib.sfSoundStream_getPitch,
    getVolume = c_lib.sfSoundStream_getVolume,
    getPosition = c_lib.sfSoundStream_getPosition,
    isRelativeToListener = c_lib.sfSoundStream_isRelativeToListener,
    getMinDistance = c_lib.sfSoundStream_getMinDistance,
    getAttenuation = c_lib.sfSoundStream_getAttenuation,
    getLoop = c_lib.sfSoundStream_getLoop,
    getPlayingOffset = c_lib.sfSoundStream_getPlayingOffset,
  },
})
lua_lib.TimeSpan = ffi.metatype('sfTimeSpan', {
  __name = 'sfTimeSpan',
})
lua_lib.SoundStreamChunk = ffi.metatype('sfSoundStreamChunk', {
  __name = 'sfSoundStreamChunk',
})
lua_lib.Listener_setGlobalVolume = lua_lib.sfListener_setGlobalVolume
lua_lib.Listener_getGlobalVolume = lua_lib.sfListener_getGlobalVolume
lua_lib.Listener_setPosition = lua_lib.sfListener_setPosition
lua_lib.Listener_getPosition = lua_lib.sfListener_getPosition
lua_lib.Listener_setDirection = lua_lib.sfListener_setDirection
lua_lib.Listener_getDirection = lua_lib.sfListener_getDirection
lua_lib.Listener_setUpVector = lua_lib.sfListener_setUpVector
lua_lib.Listener_getUpVector = lua_lib.sfListener_getUpVector
lua_lib.Music_createFromFile = lua_lib.sfMusic_createFromFile
lua_lib.Music_createFromMemory = lua_lib.sfMusic_createFromMemory
lua_lib.Music_createFromStream = lua_lib.sfMusic_createFromStream
lua_lib.Music_destroy = lua_lib.sfMusic_destroy
lua_lib.Music_setLoop = lua_lib.sfMusic_setLoop
lua_lib.Music_getLoop = lua_lib.sfMusic_getLoop
lua_lib.Music_getDuration = lua_lib.sfMusic_getDuration
lua_lib.Music_getLoopPoints = lua_lib.sfMusic_getLoopPoints
lua_lib.Music_setLoopPoints = lua_lib.sfMusic_setLoopPoints
lua_lib.Music_play = lua_lib.sfMusic_play
lua_lib.Music_pause = lua_lib.sfMusic_pause
lua_lib.Music_stop = lua_lib.sfMusic_stop
lua_lib.Music_getChannelCount = lua_lib.sfMusic_getChannelCount
lua_lib.Music_getSampleRate = lua_lib.sfMusic_getSampleRate
lua_lib.Music_getStatus = lua_lib.sfMusic_getStatus
lua_lib.Music_getPlayingOffset = lua_lib.sfMusic_getPlayingOffset
lua_lib.Music_setPitch = lua_lib.sfMusic_setPitch
lua_lib.Music_setVolume = lua_lib.sfMusic_setVolume
lua_lib.Music_setPosition = lua_lib.sfMusic_setPosition
lua_lib.Music_setRelativeToListener = lua_lib.sfMusic_setRelativeToListener
lua_lib.Music_setMinDistance = lua_lib.sfMusic_setMinDistance
lua_lib.Music_setAttenuation = lua_lib.sfMusic_setAttenuation
lua_lib.Music_setPlayingOffset = lua_lib.sfMusic_setPlayingOffset
lua_lib.Music_getPitch = lua_lib.sfMusic_getPitch
lua_lib.Music_getVolume = lua_lib.sfMusic_getVolume
lua_lib.Music_getPosition = lua_lib.sfMusic_getPosition
lua_lib.Music_isRelativeToListener = lua_lib.sfMusic_isRelativeToListener
lua_lib.Music_getMinDistance = lua_lib.sfMusic_getMinDistance
lua_lib.Music_getAttenuation = lua_lib.sfMusic_getAttenuation
lua_lib.Sound_create = lua_lib.sfSound_create
lua_lib.Sound_copy = lua_lib.sfSound_copy
lua_lib.Sound_destroy = lua_lib.sfSound_destroy
lua_lib.Sound_play = lua_lib.sfSound_play
lua_lib.Sound_pause = lua_lib.sfSound_pause
lua_lib.Sound_stop = lua_lib.sfSound_stop
lua_lib.Sound_setBuffer = lua_lib.sfSound_setBuffer
lua_lib.Sound_getBuffer = lua_lib.sfSound_getBuffer
lua_lib.Sound_setLoop = lua_lib.sfSound_setLoop
lua_lib.Sound_getLoop = lua_lib.sfSound_getLoop
lua_lib.Sound_getStatus = lua_lib.sfSound_getStatus
lua_lib.Sound_setPitch = lua_lib.sfSound_setPitch
lua_lib.Sound_setVolume = lua_lib.sfSound_setVolume
lua_lib.Sound_setPosition = lua_lib.sfSound_setPosition
lua_lib.Sound_setRelativeToListener = lua_lib.sfSound_setRelativeToListener
lua_lib.Sound_setMinDistance = lua_lib.sfSound_setMinDistance
lua_lib.Sound_setAttenuation = lua_lib.sfSound_setAttenuation
lua_lib.Sound_setPlayingOffset = lua_lib.sfSound_setPlayingOffset
lua_lib.Sound_getPitch = lua_lib.sfSound_getPitch
lua_lib.Sound_getVolume = lua_lib.sfSound_getVolume
lua_lib.Sound_getPosition = lua_lib.sfSound_getPosition
lua_lib.Sound_isRelativeToListener = lua_lib.sfSound_isRelativeToListener
lua_lib.Sound_getMinDistance = lua_lib.sfSound_getMinDistance
lua_lib.Sound_getAttenuation = lua_lib.sfSound_getAttenuation
lua_lib.Sound_getPlayingOffset = lua_lib.sfSound_getPlayingOffset
lua_lib.SoundBuffer_createFromFile = lua_lib.sfSoundBuffer_createFromFile
lua_lib.SoundBuffer_createFromMemory = lua_lib.sfSoundBuffer_createFromMemory
lua_lib.SoundBuffer_createFromStream = lua_lib.sfSoundBuffer_createFromStream
lua_lib.SoundBuffer_createFromSamples = lua_lib.sfSoundBuffer_createFromSamples
lua_lib.SoundBuffer_copy = lua_lib.sfSoundBuffer_copy
lua_lib.SoundBuffer_destroy = lua_lib.sfSoundBuffer_destroy
lua_lib.SoundBuffer_saveToFile = lua_lib.sfSoundBuffer_saveToFile
lua_lib.SoundBuffer_getSamples = lua_lib.sfSoundBuffer_getSamples
lua_lib.SoundBuffer_getSampleCount = lua_lib.sfSoundBuffer_getSampleCount
lua_lib.SoundBuffer_getSampleRate = lua_lib.sfSoundBuffer_getSampleRate
lua_lib.SoundBuffer_getChannelCount = lua_lib.sfSoundBuffer_getChannelCount
lua_lib.SoundBuffer_getDuration = lua_lib.sfSoundBuffer_getDuration
lua_lib.SoundBufferRecorder_create = lua_lib.sfSoundBufferRecorder_create
lua_lib.SoundBufferRecorder_destroy = lua_lib.sfSoundBufferRecorder_destroy
lua_lib.SoundBufferRecorder_start = lua_lib.sfSoundBufferRecorder_start
lua_lib.SoundBufferRecorder_stop = lua_lib.sfSoundBufferRecorder_stop
lua_lib.SoundBufferRecorder_getSampleRate = lua_lib.sfSoundBufferRecorder_getSampleRate
lua_lib.SoundBufferRecorder_getBuffer = lua_lib.sfSoundBufferRecorder_getBuffer
lua_lib.SoundBufferRecorder_setDevice = lua_lib.sfSoundBufferRecorder_setDevice
lua_lib.SoundBufferRecorder_getDevice = lua_lib.sfSoundBufferRecorder_getDevice
lua_lib.SoundRecorder_create = lua_lib.sfSoundRecorder_create
lua_lib.SoundRecorder_destroy = lua_lib.sfSoundRecorder_destroy
lua_lib.SoundRecorder_start = lua_lib.sfSoundRecorder_start
lua_lib.SoundRecorder_stop = lua_lib.sfSoundRecorder_stop
lua_lib.SoundRecorder_getSampleRate = lua_lib.sfSoundRecorder_getSampleRate
lua_lib.SoundRecorder_isAvailable = lua_lib.sfSoundRecorder_isAvailable
lua_lib.SoundRecorder_setProcessingInterval = lua_lib.sfSoundRecorder_setProcessingInterval
lua_lib.SoundRecorder_getAvailableDevices = lua_lib.sfSoundRecorder_getAvailableDevices
lua_lib.SoundRecorder_getDefaultDevice = lua_lib.sfSoundRecorder_getDefaultDevice
lua_lib.SoundRecorder_setDevice = lua_lib.sfSoundRecorder_setDevice
lua_lib.SoundRecorder_getDevice = lua_lib.sfSoundRecorder_getDevice
lua_lib.SoundRecorder_setChannelCount = lua_lib.sfSoundRecorder_setChannelCount
lua_lib.SoundRecorder_getChannelCount = lua_lib.sfSoundRecorder_getChannelCount
lua_lib.SoundStream_create = lua_lib.sfSoundStream_create
lua_lib.SoundStream_destroy = lua_lib.sfSoundStream_destroy
lua_lib.SoundStream_play = lua_lib.sfSoundStream_play
lua_lib.SoundStream_pause = lua_lib.sfSoundStream_pause
lua_lib.SoundStream_stop = lua_lib.sfSoundStream_stop
lua_lib.SoundStream_getStatus = lua_lib.sfSoundStream_getStatus
lua_lib.SoundStream_getChannelCount = lua_lib.sfSoundStream_getChannelCount
lua_lib.SoundStream_getSampleRate = lua_lib.sfSoundStream_getSampleRate
lua_lib.SoundStream_setPitch = lua_lib.sfSoundStream_setPitch
lua_lib.SoundStream_setVolume = lua_lib.sfSoundStream_setVolume
lua_lib.SoundStream_setPosition = lua_lib.sfSoundStream_setPosition
lua_lib.SoundStream_setRelativeToListener = lua_lib.sfSoundStream_setRelativeToListener
lua_lib.SoundStream_setMinDistance = lua_lib.sfSoundStream_setMinDistance
lua_lib.SoundStream_setAttenuation = lua_lib.sfSoundStream_setAttenuation
lua_lib.SoundStream_setPlayingOffset = lua_lib.sfSoundStream_setPlayingOffset
lua_lib.SoundStream_setLoop = lua_lib.sfSoundStream_setLoop
lua_lib.SoundStream_getPitch = lua_lib.sfSoundStream_getPitch
lua_lib.SoundStream_getVolume = lua_lib.sfSoundStream_getVolume
lua_lib.SoundStream_getPosition = lua_lib.sfSoundStream_getPosition
lua_lib.SoundStream_isRelativeToListener = lua_lib.sfSoundStream_isRelativeToListener
lua_lib.SoundStream_getMinDistance = lua_lib.sfSoundStream_getMinDistance
lua_lib.SoundStream_getAttenuation = lua_lib.sfSoundStream_getAttenuation
lua_lib.SoundStream_getLoop = lua_lib.sfSoundStream_getLoop
lua_lib.SoundStream_getPlayingOffset = lua_lib.sfSoundStream_getPlayingOffset
return lua_lib

